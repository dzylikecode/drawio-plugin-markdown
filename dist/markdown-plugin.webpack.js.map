{"version":3,"file":"markdown-plugin.webpack.js","mappings":"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","sources":["webpack://drawio-plugin-markdown/./node_modules/marked/lib/marked.esm.js","webpack://drawio-plugin-markdown/./src/parseMd.js","webpack://drawio-plugin-markdown/./src/markdown-plugin.js"],"sourcesContent":["/**\n * marked v9.0.3 - a markdown parser\n * Copyright (c) 2011-2023, Christopher Jeffrey. (MIT Licensed)\n * https://github.com/markedjs/marked\n */\n\n/**\n * DO NOT EDIT THIS FILE\n * The code in this file is generated from files in ./src/\n */\n\n/**\n * Gets the original marked default options.\n */\nfunction _getDefaults() {\n    return {\n        async: false,\n        breaks: false,\n        extensions: null,\n        gfm: true,\n        hooks: null,\n        pedantic: false,\n        renderer: null,\n        silent: false,\n        tokenizer: null,\n        walkTokens: null\n    };\n}\nlet _defaults = _getDefaults();\nfunction changeDefaults(newDefaults) {\n    _defaults = newDefaults;\n}\n\n/**\n * Helpers\n */\nconst escapeTest = /[&<>\"']/;\nconst escapeReplace = new RegExp(escapeTest.source, 'g');\nconst escapeTestNoEncode = /[<>\"']|&(?!(#\\d{1,7}|#[Xx][a-fA-F0-9]{1,6}|\\w+);)/;\nconst escapeReplaceNoEncode = new RegExp(escapeTestNoEncode.source, 'g');\nconst escapeReplacements = {\n    '&': '&amp;',\n    '<': '&lt;',\n    '>': '&gt;',\n    '\"': '&quot;',\n    \"'\": '&#39;'\n};\nconst getEscapeReplacement = (ch) => escapeReplacements[ch];\nfunction escape(html, encode) {\n    if (encode) {\n        if (escapeTest.test(html)) {\n            return html.replace(escapeReplace, getEscapeReplacement);\n        }\n    }\n    else {\n        if (escapeTestNoEncode.test(html)) {\n            return html.replace(escapeReplaceNoEncode, getEscapeReplacement);\n        }\n    }\n    return html;\n}\nconst unescapeTest = /&(#(?:\\d+)|(?:#x[0-9A-Fa-f]+)|(?:\\w+));?/ig;\nfunction unescape(html) {\n    // explicitly match decimal, hex, and named HTML entities\n    return html.replace(unescapeTest, (_, n) => {\n        n = n.toLowerCase();\n        if (n === 'colon')\n            return ':';\n        if (n.charAt(0) === '#') {\n            return n.charAt(1) === 'x'\n                ? String.fromCharCode(parseInt(n.substring(2), 16))\n                : String.fromCharCode(+n.substring(1));\n        }\n        return '';\n    });\n}\nconst caret = /(^|[^\\[])\\^/g;\nfunction edit(regex, opt) {\n    regex = typeof regex === 'string' ? regex : regex.source;\n    opt = opt || '';\n    const obj = {\n        replace: (name, val) => {\n            val = typeof val === 'object' && 'source' in val ? val.source : val;\n            val = val.replace(caret, '$1');\n            regex = regex.replace(name, val);\n            return obj;\n        },\n        getRegex: () => {\n            return new RegExp(regex, opt);\n        }\n    };\n    return obj;\n}\nfunction cleanUrl(href) {\n    try {\n        href = encodeURI(href).replace(/%25/g, '%');\n    }\n    catch (e) {\n        return null;\n    }\n    return href;\n}\nconst noopTest = { exec: () => null };\nfunction splitCells(tableRow, count) {\n    // ensure that every cell-delimiting pipe has a space\n    // before it to distinguish it from an escaped pipe\n    const row = tableRow.replace(/\\|/g, (match, offset, str) => {\n        let escaped = false;\n        let curr = offset;\n        while (--curr >= 0 && str[curr] === '\\\\')\n            escaped = !escaped;\n        if (escaped) {\n            // odd number of slashes means | is escaped\n            // so we leave it alone\n            return '|';\n        }\n        else {\n            // add space before unescaped |\n            return ' |';\n        }\n    }), cells = row.split(/ \\|/);\n    let i = 0;\n    // First/last cell in a row cannot be empty if it has no leading/trailing pipe\n    if (!cells[0].trim()) {\n        cells.shift();\n    }\n    if (cells.length > 0 && !cells[cells.length - 1].trim()) {\n        cells.pop();\n    }\n    if (count) {\n        if (cells.length > count) {\n            cells.splice(count);\n        }\n        else {\n            while (cells.length < count)\n                cells.push('');\n        }\n    }\n    for (; i < cells.length; i++) {\n        // leading or trailing whitespace is ignored per the gfm spec\n        cells[i] = cells[i].trim().replace(/\\\\\\|/g, '|');\n    }\n    return cells;\n}\n/**\n * Remove trailing 'c's. Equivalent to str.replace(/c*$/, '').\n * /c*$/ is vulnerable to REDOS.\n *\n * @param str\n * @param c\n * @param invert Remove suffix of non-c chars instead. Default falsey.\n */\nfunction rtrim(str, c, invert) {\n    const l = str.length;\n    if (l === 0) {\n        return '';\n    }\n    // Length of suffix matching the invert condition.\n    let suffLen = 0;\n    // Step left until we fail to match the invert condition.\n    while (suffLen < l) {\n        const currChar = str.charAt(l - suffLen - 1);\n        if (currChar === c && !invert) {\n            suffLen++;\n        }\n        else if (currChar !== c && invert) {\n            suffLen++;\n        }\n        else {\n            break;\n        }\n    }\n    return str.slice(0, l - suffLen);\n}\nfunction findClosingBracket(str, b) {\n    if (str.indexOf(b[1]) === -1) {\n        return -1;\n    }\n    let level = 0;\n    for (let i = 0; i < str.length; i++) {\n        if (str[i] === '\\\\') {\n            i++;\n        }\n        else if (str[i] === b[0]) {\n            level++;\n        }\n        else if (str[i] === b[1]) {\n            level--;\n            if (level < 0) {\n                return i;\n            }\n        }\n    }\n    return -1;\n}\n\nfunction outputLink(cap, link, raw, lexer) {\n    const href = link.href;\n    const title = link.title ? escape(link.title) : null;\n    const text = cap[1].replace(/\\\\([\\[\\]])/g, '$1');\n    if (cap[0].charAt(0) !== '!') {\n        lexer.state.inLink = true;\n        const token = {\n            type: 'link',\n            raw,\n            href,\n            title,\n            text,\n            tokens: lexer.inlineTokens(text)\n        };\n        lexer.state.inLink = false;\n        return token;\n    }\n    return {\n        type: 'image',\n        raw,\n        href,\n        title,\n        text: escape(text)\n    };\n}\nfunction indentCodeCompensation(raw, text) {\n    const matchIndentToCode = raw.match(/^(\\s+)(?:```)/);\n    if (matchIndentToCode === null) {\n        return text;\n    }\n    const indentToCode = matchIndentToCode[1];\n    return text\n        .split('\\n')\n        .map(node => {\n        const matchIndentInNode = node.match(/^\\s+/);\n        if (matchIndentInNode === null) {\n            return node;\n        }\n        const [indentInNode] = matchIndentInNode;\n        if (indentInNode.length >= indentToCode.length) {\n            return node.slice(indentToCode.length);\n        }\n        return node;\n    })\n        .join('\\n');\n}\n/**\n * Tokenizer\n */\nclass _Tokenizer {\n    options;\n    // TODO: Fix this rules type\n    rules;\n    lexer;\n    constructor(options) {\n        this.options = options || _defaults;\n    }\n    space(src) {\n        const cap = this.rules.block.newline.exec(src);\n        if (cap && cap[0].length > 0) {\n            return {\n                type: 'space',\n                raw: cap[0]\n            };\n        }\n    }\n    code(src) {\n        const cap = this.rules.block.code.exec(src);\n        if (cap) {\n            const text = cap[0].replace(/^ {1,4}/gm, '');\n            return {\n                type: 'code',\n                raw: cap[0],\n                codeBlockStyle: 'indented',\n                text: !this.options.pedantic\n                    ? rtrim(text, '\\n')\n                    : text\n            };\n        }\n    }\n    fences(src) {\n        const cap = this.rules.block.fences.exec(src);\n        if (cap) {\n            const raw = cap[0];\n            const text = indentCodeCompensation(raw, cap[3] || '');\n            return {\n                type: 'code',\n                raw,\n                lang: cap[2] ? cap[2].trim().replace(this.rules.inline._escapes, '$1') : cap[2],\n                text\n            };\n        }\n    }\n    heading(src) {\n        const cap = this.rules.block.heading.exec(src);\n        if (cap) {\n            let text = cap[2].trim();\n            // remove trailing #s\n            if (/#$/.test(text)) {\n                const trimmed = rtrim(text, '#');\n                if (this.options.pedantic) {\n                    text = trimmed.trim();\n                }\n                else if (!trimmed || / $/.test(trimmed)) {\n                    // CommonMark requires space before trailing #s\n                    text = trimmed.trim();\n                }\n            }\n            return {\n                type: 'heading',\n                raw: cap[0],\n                depth: cap[1].length,\n                text,\n                tokens: this.lexer.inline(text)\n            };\n        }\n    }\n    hr(src) {\n        const cap = this.rules.block.hr.exec(src);\n        if (cap) {\n            return {\n                type: 'hr',\n                raw: cap[0]\n            };\n        }\n    }\n    blockquote(src) {\n        const cap = this.rules.block.blockquote.exec(src);\n        if (cap) {\n            const text = cap[0].replace(/^ *>[ \\t]?/gm, '');\n            const top = this.lexer.state.top;\n            this.lexer.state.top = true;\n            const tokens = this.lexer.blockTokens(text);\n            this.lexer.state.top = top;\n            return {\n                type: 'blockquote',\n                raw: cap[0],\n                tokens,\n                text\n            };\n        }\n    }\n    list(src) {\n        let cap = this.rules.block.list.exec(src);\n        if (cap) {\n            let bull = cap[1].trim();\n            const isordered = bull.length > 1;\n            const list = {\n                type: 'list',\n                raw: '',\n                ordered: isordered,\n                start: isordered ? +bull.slice(0, -1) : '',\n                loose: false,\n                items: []\n            };\n            bull = isordered ? `\\\\d{1,9}\\\\${bull.slice(-1)}` : `\\\\${bull}`;\n            if (this.options.pedantic) {\n                bull = isordered ? bull : '[*+-]';\n            }\n            // Get next list item\n            const itemRegex = new RegExp(`^( {0,3}${bull})((?:[\\t ][^\\\\n]*)?(?:\\\\n|$))`);\n            let raw = '';\n            let itemContents = '';\n            let endsWithBlankLine = false;\n            // Check if current bullet point can start a new List Item\n            while (src) {\n                let endEarly = false;\n                if (!(cap = itemRegex.exec(src))) {\n                    break;\n                }\n                if (this.rules.block.hr.test(src)) { // End list if bullet was actually HR (possibly move into itemRegex?)\n                    break;\n                }\n                raw = cap[0];\n                src = src.substring(raw.length);\n                let line = cap[2].split('\\n', 1)[0].replace(/^\\t+/, (t) => ' '.repeat(3 * t.length));\n                let nextLine = src.split('\\n', 1)[0];\n                let indent = 0;\n                if (this.options.pedantic) {\n                    indent = 2;\n                    itemContents = line.trimStart();\n                }\n                else {\n                    indent = cap[2].search(/[^ ]/); // Find first non-space char\n                    indent = indent > 4 ? 1 : indent; // Treat indented code blocks (> 4 spaces) as having only 1 indent\n                    itemContents = line.slice(indent);\n                    indent += cap[1].length;\n                }\n                let blankLine = false;\n                if (!line && /^ *$/.test(nextLine)) { // Items begin with at most one blank line\n                    raw += nextLine + '\\n';\n                    src = src.substring(nextLine.length + 1);\n                    endEarly = true;\n                }\n                if (!endEarly) {\n                    const nextBulletRegex = new RegExp(`^ {0,${Math.min(3, indent - 1)}}(?:[*+-]|\\\\d{1,9}[.)])((?:[ \\t][^\\\\n]*)?(?:\\\\n|$))`);\n                    const hrRegex = new RegExp(`^ {0,${Math.min(3, indent - 1)}}((?:- *){3,}|(?:_ *){3,}|(?:\\\\* *){3,})(?:\\\\n+|$)`);\n                    const fencesBeginRegex = new RegExp(`^ {0,${Math.min(3, indent - 1)}}(?:\\`\\`\\`|~~~)`);\n                    const headingBeginRegex = new RegExp(`^ {0,${Math.min(3, indent - 1)}}#`);\n                    // Check if following lines should be included in List Item\n                    while (src) {\n                        const rawLine = src.split('\\n', 1)[0];\n                        nextLine = rawLine;\n                        // Re-align to follow commonmark nesting rules\n                        if (this.options.pedantic) {\n                            nextLine = nextLine.replace(/^ {1,4}(?=( {4})*[^ ])/g, '  ');\n                        }\n                        // End list item if found code fences\n                        if (fencesBeginRegex.test(nextLine)) {\n                            break;\n                        }\n                        // End list item if found start of new heading\n                        if (headingBeginRegex.test(nextLine)) {\n                            break;\n                        }\n                        // End list item if found start of new bullet\n                        if (nextBulletRegex.test(nextLine)) {\n                            break;\n                        }\n                        // Horizontal rule found\n                        if (hrRegex.test(src)) {\n                            break;\n                        }\n                        if (nextLine.search(/[^ ]/) >= indent || !nextLine.trim()) { // Dedent if possible\n                            itemContents += '\\n' + nextLine.slice(indent);\n                        }\n                        else {\n                            // not enough indentation\n                            if (blankLine) {\n                                break;\n                            }\n                            // paragraph continuation unless last line was a different block level element\n                            if (line.search(/[^ ]/) >= 4) { // indented code block\n                                break;\n                            }\n                            if (fencesBeginRegex.test(line)) {\n                                break;\n                            }\n                            if (headingBeginRegex.test(line)) {\n                                break;\n                            }\n                            if (hrRegex.test(line)) {\n                                break;\n                            }\n                            itemContents += '\\n' + nextLine;\n                        }\n                        if (!blankLine && !nextLine.trim()) { // Check if current line is blank\n                            blankLine = true;\n                        }\n                        raw += rawLine + '\\n';\n                        src = src.substring(rawLine.length + 1);\n                        line = nextLine.slice(indent);\n                    }\n                }\n                if (!list.loose) {\n                    // If the previous item ended with a blank line, the list is loose\n                    if (endsWithBlankLine) {\n                        list.loose = true;\n                    }\n                    else if (/\\n *\\n *$/.test(raw)) {\n                        endsWithBlankLine = true;\n                    }\n                }\n                let istask = null;\n                let ischecked;\n                // Check for task list items\n                if (this.options.gfm) {\n                    istask = /^\\[[ xX]\\] /.exec(itemContents);\n                    if (istask) {\n                        ischecked = istask[0] !== '[ ] ';\n                        itemContents = itemContents.replace(/^\\[[ xX]\\] +/, '');\n                    }\n                }\n                list.items.push({\n                    type: 'list_item',\n                    raw,\n                    task: !!istask,\n                    checked: ischecked,\n                    loose: false,\n                    text: itemContents,\n                    tokens: []\n                });\n                list.raw += raw;\n            }\n            // Do not consume newlines at end of final item. Alternatively, make itemRegex *start* with any newlines to simplify/speed up endsWithBlankLine logic\n            list.items[list.items.length - 1].raw = raw.trimEnd();\n            list.items[list.items.length - 1].text = itemContents.trimEnd();\n            list.raw = list.raw.trimEnd();\n            // Item child tokens handled here at end because we needed to have the final item to trim it first\n            for (let i = 0; i < list.items.length; i++) {\n                this.lexer.state.top = false;\n                list.items[i].tokens = this.lexer.blockTokens(list.items[i].text, []);\n                if (!list.loose) {\n                    // Check if list should be loose\n                    const spacers = list.items[i].tokens.filter(t => t.type === 'space');\n                    const hasMultipleLineBreaks = spacers.length > 0 && spacers.some(t => /\\n.*\\n/.test(t.raw));\n                    list.loose = hasMultipleLineBreaks;\n                }\n            }\n            // Set all items to loose if list is loose\n            if (list.loose) {\n                for (let i = 0; i < list.items.length; i++) {\n                    list.items[i].loose = true;\n                }\n            }\n            return list;\n        }\n    }\n    html(src) {\n        const cap = this.rules.block.html.exec(src);\n        if (cap) {\n            const token = {\n                type: 'html',\n                block: true,\n                raw: cap[0],\n                pre: cap[1] === 'pre' || cap[1] === 'script' || cap[1] === 'style',\n                text: cap[0]\n            };\n            return token;\n        }\n    }\n    def(src) {\n        const cap = this.rules.block.def.exec(src);\n        if (cap) {\n            const tag = cap[1].toLowerCase().replace(/\\s+/g, ' ');\n            const href = cap[2] ? cap[2].replace(/^<(.*)>$/, '$1').replace(this.rules.inline._escapes, '$1') : '';\n            const title = cap[3] ? cap[3].substring(1, cap[3].length - 1).replace(this.rules.inline._escapes, '$1') : cap[3];\n            return {\n                type: 'def',\n                tag,\n                raw: cap[0],\n                href,\n                title\n            };\n        }\n    }\n    table(src) {\n        const cap = this.rules.block.table.exec(src);\n        if (cap) {\n            if (!/[:|]/.test(cap[2])) {\n                // delimiter row must have a pipe (|) or colon (:) otherwise it is a setext heading\n                return;\n            }\n            const item = {\n                type: 'table',\n                raw: cap[0],\n                header: splitCells(cap[1]).map(c => {\n                    return { text: c, tokens: [] };\n                }),\n                align: cap[2].replace(/^\\||\\| *$/g, '').split('|'),\n                rows: cap[3] && cap[3].trim() ? cap[3].replace(/\\n[ \\t]*$/, '').split('\\n') : []\n            };\n            if (item.header.length === item.align.length) {\n                let l = item.align.length;\n                let i, j, k, row;\n                for (i = 0; i < l; i++) {\n                    const align = item.align[i];\n                    if (align) {\n                        if (/^ *-+: *$/.test(align)) {\n                            item.align[i] = 'right';\n                        }\n                        else if (/^ *:-+: *$/.test(align)) {\n                            item.align[i] = 'center';\n                        }\n                        else if (/^ *:-+ *$/.test(align)) {\n                            item.align[i] = 'left';\n                        }\n                        else {\n                            item.align[i] = null;\n                        }\n                    }\n                }\n                l = item.rows.length;\n                for (i = 0; i < l; i++) {\n                    item.rows[i] = splitCells(item.rows[i], item.header.length).map(c => {\n                        return { text: c, tokens: [] };\n                    });\n                }\n                // parse child tokens inside headers and cells\n                // header child tokens\n                l = item.header.length;\n                for (j = 0; j < l; j++) {\n                    item.header[j].tokens = this.lexer.inline(item.header[j].text);\n                }\n                // cell child tokens\n                l = item.rows.length;\n                for (j = 0; j < l; j++) {\n                    row = item.rows[j];\n                    for (k = 0; k < row.length; k++) {\n                        row[k].tokens = this.lexer.inline(row[k].text);\n                    }\n                }\n                return item;\n            }\n        }\n    }\n    lheading(src) {\n        const cap = this.rules.block.lheading.exec(src);\n        if (cap) {\n            return {\n                type: 'heading',\n                raw: cap[0],\n                depth: cap[2].charAt(0) === '=' ? 1 : 2,\n                text: cap[1],\n                tokens: this.lexer.inline(cap[1])\n            };\n        }\n    }\n    paragraph(src) {\n        const cap = this.rules.block.paragraph.exec(src);\n        if (cap) {\n            const text = cap[1].charAt(cap[1].length - 1) === '\\n'\n                ? cap[1].slice(0, -1)\n                : cap[1];\n            return {\n                type: 'paragraph',\n                raw: cap[0],\n                text,\n                tokens: this.lexer.inline(text)\n            };\n        }\n    }\n    text(src) {\n        const cap = this.rules.block.text.exec(src);\n        if (cap) {\n            return {\n                type: 'text',\n                raw: cap[0],\n                text: cap[0],\n                tokens: this.lexer.inline(cap[0])\n            };\n        }\n    }\n    escape(src) {\n        const cap = this.rules.inline.escape.exec(src);\n        if (cap) {\n            return {\n                type: 'escape',\n                raw: cap[0],\n                text: escape(cap[1])\n            };\n        }\n    }\n    tag(src) {\n        const cap = this.rules.inline.tag.exec(src);\n        if (cap) {\n            if (!this.lexer.state.inLink && /^<a /i.test(cap[0])) {\n                this.lexer.state.inLink = true;\n            }\n            else if (this.lexer.state.inLink && /^<\\/a>/i.test(cap[0])) {\n                this.lexer.state.inLink = false;\n            }\n            if (!this.lexer.state.inRawBlock && /^<(pre|code|kbd|script)(\\s|>)/i.test(cap[0])) {\n                this.lexer.state.inRawBlock = true;\n            }\n            else if (this.lexer.state.inRawBlock && /^<\\/(pre|code|kbd|script)(\\s|>)/i.test(cap[0])) {\n                this.lexer.state.inRawBlock = false;\n            }\n            return {\n                type: 'html',\n                raw: cap[0],\n                inLink: this.lexer.state.inLink,\n                inRawBlock: this.lexer.state.inRawBlock,\n                block: false,\n                text: cap[0]\n            };\n        }\n    }\n    link(src) {\n        const cap = this.rules.inline.link.exec(src);\n        if (cap) {\n            const trimmedUrl = cap[2].trim();\n            if (!this.options.pedantic && /^</.test(trimmedUrl)) {\n                // commonmark requires matching angle brackets\n                if (!(/>$/.test(trimmedUrl))) {\n                    return;\n                }\n                // ending angle bracket cannot be escaped\n                const rtrimSlash = rtrim(trimmedUrl.slice(0, -1), '\\\\');\n                if ((trimmedUrl.length - rtrimSlash.length) % 2 === 0) {\n                    return;\n                }\n            }\n            else {\n                // find closing parenthesis\n                const lastParenIndex = findClosingBracket(cap[2], '()');\n                if (lastParenIndex > -1) {\n                    const start = cap[0].indexOf('!') === 0 ? 5 : 4;\n                    const linkLen = start + cap[1].length + lastParenIndex;\n                    cap[2] = cap[2].substring(0, lastParenIndex);\n                    cap[0] = cap[0].substring(0, linkLen).trim();\n                    cap[3] = '';\n                }\n            }\n            let href = cap[2];\n            let title = '';\n            if (this.options.pedantic) {\n                // split pedantic href and title\n                const link = /^([^'\"]*[^\\s])\\s+(['\"])(.*)\\2/.exec(href);\n                if (link) {\n                    href = link[1];\n                    title = link[3];\n                }\n            }\n            else {\n                title = cap[3] ? cap[3].slice(1, -1) : '';\n            }\n            href = href.trim();\n            if (/^</.test(href)) {\n                if (this.options.pedantic && !(/>$/.test(trimmedUrl))) {\n                    // pedantic allows starting angle bracket without ending angle bracket\n                    href = href.slice(1);\n                }\n                else {\n                    href = href.slice(1, -1);\n                }\n            }\n            return outputLink(cap, {\n                href: href ? href.replace(this.rules.inline._escapes, '$1') : href,\n                title: title ? title.replace(this.rules.inline._escapes, '$1') : title\n            }, cap[0], this.lexer);\n        }\n    }\n    reflink(src, links) {\n        let cap;\n        if ((cap = this.rules.inline.reflink.exec(src))\n            || (cap = this.rules.inline.nolink.exec(src))) {\n            let link = (cap[2] || cap[1]).replace(/\\s+/g, ' ');\n            link = links[link.toLowerCase()];\n            if (!link) {\n                const text = cap[0].charAt(0);\n                return {\n                    type: 'text',\n                    raw: text,\n                    text\n                };\n            }\n            return outputLink(cap, link, cap[0], this.lexer);\n        }\n    }\n    emStrong(src, maskedSrc, prevChar = '') {\n        let match = this.rules.inline.emStrong.lDelim.exec(src);\n        if (!match)\n            return;\n        // _ can't be between two alphanumerics. \\p{L}\\p{N} includes non-english alphabet/numbers as well\n        if (match[3] && prevChar.match(/[\\p{L}\\p{N}]/u))\n            return;\n        const nextChar = match[1] || match[2] || '';\n        if (!nextChar || !prevChar || this.rules.inline.punctuation.exec(prevChar)) {\n            // unicode Regex counts emoji as 1 char; spread into array for proper count (used multiple times below)\n            const lLength = [...match[0]].length - 1;\n            let rDelim, rLength, delimTotal = lLength, midDelimTotal = 0;\n            const endReg = match[0][0] === '*' ? this.rules.inline.emStrong.rDelimAst : this.rules.inline.emStrong.rDelimUnd;\n            endReg.lastIndex = 0;\n            // Clip maskedSrc to same section of string as src (move to lexer?)\n            maskedSrc = maskedSrc.slice(-1 * src.length + match[0].length - 1);\n            while ((match = endReg.exec(maskedSrc)) != null) {\n                rDelim = match[1] || match[2] || match[3] || match[4] || match[5] || match[6];\n                if (!rDelim)\n                    continue; // skip single * in __abc*abc__\n                rLength = [...rDelim].length;\n                if (match[3] || match[4]) { // found another Left Delim\n                    delimTotal += rLength;\n                    continue;\n                }\n                else if (match[5] || match[6]) { // either Left or Right Delim\n                    if (lLength % 3 && !((lLength + rLength) % 3)) {\n                        midDelimTotal += rLength;\n                        continue; // CommonMark Emphasis Rules 9-10\n                    }\n                }\n                delimTotal -= rLength;\n                if (delimTotal > 0)\n                    continue; // Haven't found enough closing delimiters\n                // Remove extra characters. *a*** -> *a*\n                rLength = Math.min(rLength, rLength + delimTotal + midDelimTotal);\n                const raw = [...src].slice(0, lLength + match.index + rLength + 1).join('');\n                // Create `em` if smallest delimiter has odd char count. *a***\n                if (Math.min(lLength, rLength) % 2) {\n                    const text = raw.slice(1, -1);\n                    return {\n                        type: 'em',\n                        raw,\n                        text,\n                        tokens: this.lexer.inlineTokens(text)\n                    };\n                }\n                // Create 'strong' if smallest delimiter has even char count. **a***\n                const text = raw.slice(2, -2);\n                return {\n                    type: 'strong',\n                    raw,\n                    text,\n                    tokens: this.lexer.inlineTokens(text)\n                };\n            }\n        }\n    }\n    codespan(src) {\n        const cap = this.rules.inline.code.exec(src);\n        if (cap) {\n            let text = cap[2].replace(/\\n/g, ' ');\n            const hasNonSpaceChars = /[^ ]/.test(text);\n            const hasSpaceCharsOnBothEnds = /^ /.test(text) && / $/.test(text);\n            if (hasNonSpaceChars && hasSpaceCharsOnBothEnds) {\n                text = text.substring(1, text.length - 1);\n            }\n            text = escape(text, true);\n            return {\n                type: 'codespan',\n                raw: cap[0],\n                text\n            };\n        }\n    }\n    br(src) {\n        const cap = this.rules.inline.br.exec(src);\n        if (cap) {\n            return {\n                type: 'br',\n                raw: cap[0]\n            };\n        }\n    }\n    del(src) {\n        const cap = this.rules.inline.del.exec(src);\n        if (cap) {\n            return {\n                type: 'del',\n                raw: cap[0],\n                text: cap[2],\n                tokens: this.lexer.inlineTokens(cap[2])\n            };\n        }\n    }\n    autolink(src) {\n        const cap = this.rules.inline.autolink.exec(src);\n        if (cap) {\n            let text, href;\n            if (cap[2] === '@') {\n                text = escape(cap[1]);\n                href = 'mailto:' + text;\n            }\n            else {\n                text = escape(cap[1]);\n                href = text;\n            }\n            return {\n                type: 'link',\n                raw: cap[0],\n                text,\n                href,\n                tokens: [\n                    {\n                        type: 'text',\n                        raw: text,\n                        text\n                    }\n                ]\n            };\n        }\n    }\n    url(src) {\n        let cap;\n        if (cap = this.rules.inline.url.exec(src)) {\n            let text, href;\n            if (cap[2] === '@') {\n                text = escape(cap[0]);\n                href = 'mailto:' + text;\n            }\n            else {\n                // do extended autolink path validation\n                let prevCapZero;\n                do {\n                    prevCapZero = cap[0];\n                    cap[0] = this.rules.inline._backpedal.exec(cap[0])[0];\n                } while (prevCapZero !== cap[0]);\n                text = escape(cap[0]);\n                if (cap[1] === 'www.') {\n                    href = 'http://' + cap[0];\n                }\n                else {\n                    href = cap[0];\n                }\n            }\n            return {\n                type: 'link',\n                raw: cap[0],\n                text,\n                href,\n                tokens: [\n                    {\n                        type: 'text',\n                        raw: text,\n                        text\n                    }\n                ]\n            };\n        }\n    }\n    inlineText(src) {\n        const cap = this.rules.inline.text.exec(src);\n        if (cap) {\n            let text;\n            if (this.lexer.state.inRawBlock) {\n                text = cap[0];\n            }\n            else {\n                text = escape(cap[0]);\n            }\n            return {\n                type: 'text',\n                raw: cap[0],\n                text\n            };\n        }\n    }\n}\n\n/**\n * Block-Level Grammar\n */\n// Not all rules are defined in the object literal\n// @ts-expect-error\nconst block = {\n    newline: /^(?: *(?:\\n|$))+/,\n    code: /^( {4}[^\\n]+(?:\\n(?: *(?:\\n|$))*)?)+/,\n    fences: /^ {0,3}(`{3,}(?=[^`\\n]*(?:\\n|$))|~{3,})([^\\n]*)(?:\\n|$)(?:|([\\s\\S]*?)(?:\\n|$))(?: {0,3}\\1[~`]* *(?=\\n|$)|$)/,\n    hr: /^ {0,3}((?:-[\\t ]*){3,}|(?:_[ \\t]*){3,}|(?:\\*[ \\t]*){3,})(?:\\n+|$)/,\n    heading: /^ {0,3}(#{1,6})(?=\\s|$)(.*)(?:\\n+|$)/,\n    blockquote: /^( {0,3}> ?(paragraph|[^\\n]*)(?:\\n|$))+/,\n    list: /^( {0,3}bull)([ \\t][^\\n]+?)?(?:\\n|$)/,\n    html: '^ {0,3}(?:' // optional indentation\n        + '<(script|pre|style|textarea)[\\\\s>][\\\\s\\\\S]*?(?:</\\\\1>[^\\\\n]*\\\\n+|$)' // (1)\n        + '|comment[^\\\\n]*(\\\\n+|$)' // (2)\n        + '|<\\\\?[\\\\s\\\\S]*?(?:\\\\?>\\\\n*|$)' // (3)\n        + '|<![A-Z][\\\\s\\\\S]*?(?:>\\\\n*|$)' // (4)\n        + '|<!\\\\[CDATA\\\\[[\\\\s\\\\S]*?(?:\\\\]\\\\]>\\\\n*|$)' // (5)\n        + '|</?(tag)(?: +|\\\\n|/?>)[\\\\s\\\\S]*?(?:(?:\\\\n *)+\\\\n|$)' // (6)\n        + '|<(?!script|pre|style|textarea)([a-z][\\\\w-]*)(?:attribute)*? */?>(?=[ \\\\t]*(?:\\\\n|$))[\\\\s\\\\S]*?(?:(?:\\\\n *)+\\\\n|$)' // (7) open tag\n        + '|</(?!script|pre|style|textarea)[a-z][\\\\w-]*\\\\s*>(?=[ \\\\t]*(?:\\\\n|$))[\\\\s\\\\S]*?(?:(?:\\\\n *)+\\\\n|$)' // (7) closing tag\n        + ')',\n    def: /^ {0,3}\\[(label)\\]: *(?:\\n *)?([^<\\s][^\\s]*|<.*?>)(?:(?: +(?:\\n *)?| *\\n *)(title))? *(?:\\n+|$)/,\n    table: noopTest,\n    lheading: /^(?!bull )((?:.|\\n(?!\\s*?\\n|bull ))+?)\\n {0,3}(=+|-+) *(?:\\n+|$)/,\n    // regex template, placeholders will be replaced according to different paragraph\n    // interruption rules of commonmark and the original markdown spec:\n    _paragraph: /^([^\\n]+(?:\\n(?!hr|heading|lheading|blockquote|fences|list|html|table| +\\n)[^\\n]+)*)/,\n    text: /^[^\\n]+/\n};\nblock._label = /(?!\\s*\\])(?:\\\\.|[^\\[\\]\\\\])+/;\nblock._title = /(?:\"(?:\\\\\"?|[^\"\\\\])*\"|'[^'\\n]*(?:\\n[^'\\n]+)*\\n?'|\\([^()]*\\))/;\nblock.def = edit(block.def)\n    .replace('label', block._label)\n    .replace('title', block._title)\n    .getRegex();\nblock.bullet = /(?:[*+-]|\\d{1,9}[.)])/;\nblock.listItemStart = edit(/^( *)(bull) */)\n    .replace('bull', block.bullet)\n    .getRegex();\nblock.list = edit(block.list)\n    .replace(/bull/g, block.bullet)\n    .replace('hr', '\\\\n+(?=\\\\1?(?:(?:- *){3,}|(?:_ *){3,}|(?:\\\\* *){3,})(?:\\\\n+|$))')\n    .replace('def', '\\\\n+(?=' + block.def.source + ')')\n    .getRegex();\nblock._tag = 'address|article|aside|base|basefont|blockquote|body|caption'\n    + '|center|col|colgroup|dd|details|dialog|dir|div|dl|dt|fieldset|figcaption'\n    + '|figure|footer|form|frame|frameset|h[1-6]|head|header|hr|html|iframe'\n    + '|legend|li|link|main|menu|menuitem|meta|nav|noframes|ol|optgroup|option'\n    + '|p|param|section|source|summary|table|tbody|td|tfoot|th|thead|title|tr'\n    + '|track|ul';\nblock._comment = /<!--(?!-?>)[\\s\\S]*?(?:-->|$)/;\nblock.html = edit(block.html, 'i')\n    .replace('comment', block._comment)\n    .replace('tag', block._tag)\n    .replace('attribute', / +[a-zA-Z:_][\\w.:-]*(?: *= *\"[^\"\\n]*\"| *= *'[^'\\n]*'| *= *[^\\s\"'=<>`]+)?/)\n    .getRegex();\nblock.lheading = edit(block.lheading)\n    .replace(/bull/g, block.bullet) // lists can interrupt\n    .getRegex();\nblock.paragraph = edit(block._paragraph)\n    .replace('hr', block.hr)\n    .replace('heading', ' {0,3}#{1,6} ')\n    .replace('|lheading', '') // setex headings don't interrupt commonmark paragraphs\n    .replace('|table', '')\n    .replace('blockquote', ' {0,3}>')\n    .replace('fences', ' {0,3}(?:`{3,}(?=[^`\\\\n]*\\\\n)|~{3,})[^\\\\n]*\\\\n')\n    .replace('list', ' {0,3}(?:[*+-]|1[.)]) ') // only lists starting from 1 can interrupt\n    .replace('html', '</?(?:tag)(?: +|\\\\n|/?>)|<(?:script|pre|style|textarea|!--)')\n    .replace('tag', block._tag) // pars can be interrupted by type (6) html blocks\n    .getRegex();\nblock.blockquote = edit(block.blockquote)\n    .replace('paragraph', block.paragraph)\n    .getRegex();\n/**\n * Normal Block Grammar\n */\nblock.normal = { ...block };\n/**\n * GFM Block Grammar\n */\nblock.gfm = {\n    ...block.normal,\n    table: '^ *([^\\\\n ].*)\\\\n' // Header\n        + ' {0,3}((?:\\\\| *)?:?-+:? *(?:\\\\| *:?-+:? *)*(?:\\\\| *)?)' // Align\n        + '(?:\\\\n((?:(?! *\\\\n|hr|heading|blockquote|code|fences|list|html).*(?:\\\\n|$))*)\\\\n*|$)' // Cells\n};\nblock.gfm.table = edit(block.gfm.table)\n    .replace('hr', block.hr)\n    .replace('heading', ' {0,3}#{1,6} ')\n    .replace('blockquote', ' {0,3}>')\n    .replace('code', ' {4}[^\\\\n]')\n    .replace('fences', ' {0,3}(?:`{3,}(?=[^`\\\\n]*\\\\n)|~{3,})[^\\\\n]*\\\\n')\n    .replace('list', ' {0,3}(?:[*+-]|1[.)]) ') // only lists starting from 1 can interrupt\n    .replace('html', '</?(?:tag)(?: +|\\\\n|/?>)|<(?:script|pre|style|textarea|!--)')\n    .replace('tag', block._tag) // tables can be interrupted by type (6) html blocks\n    .getRegex();\nblock.gfm.paragraph = edit(block._paragraph)\n    .replace('hr', block.hr)\n    .replace('heading', ' {0,3}#{1,6} ')\n    .replace('|lheading', '') // setex headings don't interrupt commonmark paragraphs\n    .replace('table', block.gfm.table) // interrupt paragraphs with table\n    .replace('blockquote', ' {0,3}>')\n    .replace('fences', ' {0,3}(?:`{3,}(?=[^`\\\\n]*\\\\n)|~{3,})[^\\\\n]*\\\\n')\n    .replace('list', ' {0,3}(?:[*+-]|1[.)]) ') // only lists starting from 1 can interrupt\n    .replace('html', '</?(?:tag)(?: +|\\\\n|/?>)|<(?:script|pre|style|textarea|!--)')\n    .replace('tag', block._tag) // pars can be interrupted by type (6) html blocks\n    .getRegex();\n/**\n * Pedantic grammar (original John Gruber's loose markdown specification)\n */\nblock.pedantic = {\n    ...block.normal,\n    html: edit('^ *(?:comment *(?:\\\\n|\\\\s*$)'\n        + '|<(tag)[\\\\s\\\\S]+?</\\\\1> *(?:\\\\n{2,}|\\\\s*$)' // closed tag\n        + '|<tag(?:\"[^\"]*\"|\\'[^\\']*\\'|\\\\s[^\\'\"/>\\\\s]*)*?/?> *(?:\\\\n{2,}|\\\\s*$))')\n        .replace('comment', block._comment)\n        .replace(/tag/g, '(?!(?:'\n        + 'a|em|strong|small|s|cite|q|dfn|abbr|data|time|code|var|samp|kbd|sub'\n        + '|sup|i|b|u|mark|ruby|rt|rp|bdi|bdo|span|br|wbr|ins|del|img)'\n        + '\\\\b)\\\\w+(?!:|[^\\\\w\\\\s@]*@)\\\\b')\n        .getRegex(),\n    def: /^ *\\[([^\\]]+)\\]: *<?([^\\s>]+)>?(?: +([\"(][^\\n]+[\")]))? *(?:\\n+|$)/,\n    heading: /^(#{1,6})(.*)(?:\\n+|$)/,\n    fences: noopTest,\n    lheading: /^(.+?)\\n {0,3}(=+|-+) *(?:\\n+|$)/,\n    paragraph: edit(block.normal._paragraph)\n        .replace('hr', block.hr)\n        .replace('heading', ' *#{1,6} *[^\\n]')\n        .replace('lheading', block.lheading)\n        .replace('blockquote', ' {0,3}>')\n        .replace('|fences', '')\n        .replace('|list', '')\n        .replace('|html', '')\n        .getRegex()\n};\n/**\n * Inline-Level Grammar\n */\n// Not all rules are defined in the object literal\n// @ts-expect-error\nconst inline = {\n    escape: /^\\\\([!\"#$%&'()*+,\\-./:;<=>?@\\[\\]\\\\^_`{|}~])/,\n    autolink: /^<(scheme:[^\\s\\x00-\\x1f<>]*|email)>/,\n    url: noopTest,\n    tag: '^comment'\n        + '|^</[a-zA-Z][\\\\w:-]*\\\\s*>' // self-closing tag\n        + '|^<[a-zA-Z][\\\\w-]*(?:attribute)*?\\\\s*/?>' // open tag\n        + '|^<\\\\?[\\\\s\\\\S]*?\\\\?>' // processing instruction, e.g. <?php ?>\n        + '|^<![a-zA-Z]+\\\\s[\\\\s\\\\S]*?>' // declaration, e.g. <!DOCTYPE html>\n        + '|^<!\\\\[CDATA\\\\[[\\\\s\\\\S]*?\\\\]\\\\]>',\n    link: /^!?\\[(label)\\]\\(\\s*(href)(?:\\s+(title))?\\s*\\)/,\n    reflink: /^!?\\[(label)\\]\\[(ref)\\]/,\n    nolink: /^!?\\[(ref)\\](?:\\[\\])?/,\n    reflinkSearch: 'reflink|nolink(?!\\\\()',\n    emStrong: {\n        lDelim: /^(?:\\*+(?:((?!\\*)[punct])|[^\\s*]))|^_+(?:((?!_)[punct])|([^\\s_]))/,\n        //         (1) and (2) can only be a Right Delimiter. (3) and (4) can only be Left.  (5) and (6) can be either Left or Right.\n        //         | Skip orphan inside strong      | Consume to delim | (1) #***              | (2) a***#, a***                    | (3) #***a, ***a                  | (4) ***#                 | (5) #***#                         | (6) a***a\n        rDelimAst: /^[^_*]*?__[^_*]*?\\*[^_*]*?(?=__)|[^*]+(?=[^*])|(?!\\*)[punct](\\*+)(?=[\\s]|$)|[^punct\\s](\\*+)(?!\\*)(?=[punct\\s]|$)|(?!\\*)[punct\\s](\\*+)(?=[^punct\\s])|[\\s](\\*+)(?!\\*)(?=[punct])|(?!\\*)[punct](\\*+)(?!\\*)(?=[punct])|[^punct\\s](\\*+)(?=[^punct\\s])/,\n        rDelimUnd: /^[^_*]*?\\*\\*[^_*]*?_[^_*]*?(?=\\*\\*)|[^_]+(?=[^_])|(?!_)[punct](_+)(?=[\\s]|$)|[^punct\\s](_+)(?!_)(?=[punct\\s]|$)|(?!_)[punct\\s](_+)(?=[^punct\\s])|[\\s](_+)(?!_)(?=[punct])|(?!_)[punct](_+)(?!_)(?=[punct])/ // ^- Not allowed for _\n    },\n    code: /^(`+)([^`]|[^`][\\s\\S]*?[^`])\\1(?!`)/,\n    br: /^( {2,}|\\\\)\\n(?!\\s*$)/,\n    del: noopTest,\n    text: /^(`+|[^`])(?:(?= {2,}\\n)|[\\s\\S]*?(?:(?=[\\\\<!\\[`*_]|\\b_|$)|[^ ](?= {2,}\\n)))/,\n    punctuation: /^((?![*_])[\\spunctuation])/\n};\n// list of unicode punctuation marks, plus any missing characters from CommonMark spec\ninline._punctuation = '\\\\p{P}$+<=>`^|~';\ninline.punctuation = edit(inline.punctuation, 'u').replace(/punctuation/g, inline._punctuation).getRegex();\n// sequences em should skip over [title](link), `code`, <html>\ninline.blockSkip = /\\[[^[\\]]*?\\]\\([^\\(\\)]*?\\)|`[^`]*?`|<[^<>]*?>/g;\ninline.anyPunctuation = /\\\\[punct]/g;\ninline._escapes = /\\\\([punct])/g;\ninline._comment = edit(block._comment).replace('(?:-->|$)', '-->').getRegex();\ninline.emStrong.lDelim = edit(inline.emStrong.lDelim, 'u')\n    .replace(/punct/g, inline._punctuation)\n    .getRegex();\ninline.emStrong.rDelimAst = edit(inline.emStrong.rDelimAst, 'gu')\n    .replace(/punct/g, inline._punctuation)\n    .getRegex();\ninline.emStrong.rDelimUnd = edit(inline.emStrong.rDelimUnd, 'gu')\n    .replace(/punct/g, inline._punctuation)\n    .getRegex();\ninline.anyPunctuation = edit(inline.anyPunctuation, 'gu')\n    .replace(/punct/g, inline._punctuation)\n    .getRegex();\ninline._escapes = edit(inline._escapes, 'gu')\n    .replace(/punct/g, inline._punctuation)\n    .getRegex();\ninline._scheme = /[a-zA-Z][a-zA-Z0-9+.-]{1,31}/;\ninline._email = /[a-zA-Z0-9.!#$%&'*+/=?^_`{|}~-]+(@)[a-zA-Z0-9](?:[a-zA-Z0-9-]{0,61}[a-zA-Z0-9])?(?:\\.[a-zA-Z0-9](?:[a-zA-Z0-9-]{0,61}[a-zA-Z0-9])?)+(?![-_])/;\ninline.autolink = edit(inline.autolink)\n    .replace('scheme', inline._scheme)\n    .replace('email', inline._email)\n    .getRegex();\ninline._attribute = /\\s+[a-zA-Z:_][\\w.:-]*(?:\\s*=\\s*\"[^\"]*\"|\\s*=\\s*'[^']*'|\\s*=\\s*[^\\s\"'=<>`]+)?/;\ninline.tag = edit(inline.tag)\n    .replace('comment', inline._comment)\n    .replace('attribute', inline._attribute)\n    .getRegex();\ninline._label = /(?:\\[(?:\\\\.|[^\\[\\]\\\\])*\\]|\\\\.|`[^`]*`|[^\\[\\]\\\\`])*?/;\ninline._href = /<(?:\\\\.|[^\\n<>\\\\])+>|[^\\s\\x00-\\x1f]*/;\ninline._title = /\"(?:\\\\\"?|[^\"\\\\])*\"|'(?:\\\\'?|[^'\\\\])*'|\\((?:\\\\\\)?|[^)\\\\])*\\)/;\ninline.link = edit(inline.link)\n    .replace('label', inline._label)\n    .replace('href', inline._href)\n    .replace('title', inline._title)\n    .getRegex();\ninline.reflink = edit(inline.reflink)\n    .replace('label', inline._label)\n    .replace('ref', block._label)\n    .getRegex();\ninline.nolink = edit(inline.nolink)\n    .replace('ref', block._label)\n    .getRegex();\ninline.reflinkSearch = edit(inline.reflinkSearch, 'g')\n    .replace('reflink', inline.reflink)\n    .replace('nolink', inline.nolink)\n    .getRegex();\n/**\n * Normal Inline Grammar\n */\ninline.normal = { ...inline };\n/**\n * Pedantic Inline Grammar\n */\ninline.pedantic = {\n    ...inline.normal,\n    strong: {\n        start: /^__|\\*\\*/,\n        middle: /^__(?=\\S)([\\s\\S]*?\\S)__(?!_)|^\\*\\*(?=\\S)([\\s\\S]*?\\S)\\*\\*(?!\\*)/,\n        endAst: /\\*\\*(?!\\*)/g,\n        endUnd: /__(?!_)/g\n    },\n    em: {\n        start: /^_|\\*/,\n        middle: /^()\\*(?=\\S)([\\s\\S]*?\\S)\\*(?!\\*)|^_(?=\\S)([\\s\\S]*?\\S)_(?!_)/,\n        endAst: /\\*(?!\\*)/g,\n        endUnd: /_(?!_)/g\n    },\n    link: edit(/^!?\\[(label)\\]\\((.*?)\\)/)\n        .replace('label', inline._label)\n        .getRegex(),\n    reflink: edit(/^!?\\[(label)\\]\\s*\\[([^\\]]*)\\]/)\n        .replace('label', inline._label)\n        .getRegex()\n};\n/**\n * GFM Inline Grammar\n */\ninline.gfm = {\n    ...inline.normal,\n    escape: edit(inline.escape).replace('])', '~|])').getRegex(),\n    _extended_email: /[A-Za-z0-9._+-]+(@)[a-zA-Z0-9-_]+(?:\\.[a-zA-Z0-9-_]*[a-zA-Z0-9])+(?![-_])/,\n    url: /^((?:ftp|https?):\\/\\/|www\\.)(?:[a-zA-Z0-9\\-]+\\.?)+[^\\s<]*|^email/,\n    _backpedal: /(?:[^?!.,:;*_'\"~()&]+|\\([^)]*\\)|&(?![a-zA-Z0-9]+;$)|[?!.,:;*_'\"~)]+(?!$))+/,\n    del: /^(~~?)(?=[^\\s~])([\\s\\S]*?[^\\s~])\\1(?=[^~]|$)/,\n    text: /^([`~]+|[^`~])(?:(?= {2,}\\n)|(?=[a-zA-Z0-9.!#$%&'*+\\/=?_`{\\|}~-]+@)|[\\s\\S]*?(?:(?=[\\\\<!\\[`*~_]|\\b_|https?:\\/\\/|ftp:\\/\\/|www\\.|$)|[^ ](?= {2,}\\n)|[^a-zA-Z0-9.!#$%&'*+\\/=?_`{\\|}~-](?=[a-zA-Z0-9.!#$%&'*+\\/=?_`{\\|}~-]+@)))/\n};\ninline.gfm.url = edit(inline.gfm.url, 'i')\n    .replace('email', inline.gfm._extended_email)\n    .getRegex();\n/**\n * GFM + Line Breaks Inline Grammar\n */\ninline.breaks = {\n    ...inline.gfm,\n    br: edit(inline.br).replace('{2,}', '*').getRegex(),\n    text: edit(inline.gfm.text)\n        .replace('\\\\b_', '\\\\b_| {2,}\\\\n')\n        .replace(/\\{2,\\}/g, '*')\n        .getRegex()\n};\n\n/**\n * Block Lexer\n */\nclass _Lexer {\n    tokens;\n    options;\n    state;\n    tokenizer;\n    inlineQueue;\n    constructor(options) {\n        // TokenList cannot be created in one go\n        // @ts-expect-error\n        this.tokens = [];\n        this.tokens.links = Object.create(null);\n        this.options = options || _defaults;\n        this.options.tokenizer = this.options.tokenizer || new _Tokenizer();\n        this.tokenizer = this.options.tokenizer;\n        this.tokenizer.options = this.options;\n        this.tokenizer.lexer = this;\n        this.inlineQueue = [];\n        this.state = {\n            inLink: false,\n            inRawBlock: false,\n            top: true\n        };\n        const rules = {\n            block: block.normal,\n            inline: inline.normal\n        };\n        if (this.options.pedantic) {\n            rules.block = block.pedantic;\n            rules.inline = inline.pedantic;\n        }\n        else if (this.options.gfm) {\n            rules.block = block.gfm;\n            if (this.options.breaks) {\n                rules.inline = inline.breaks;\n            }\n            else {\n                rules.inline = inline.gfm;\n            }\n        }\n        this.tokenizer.rules = rules;\n    }\n    /**\n     * Expose Rules\n     */\n    static get rules() {\n        return {\n            block,\n            inline\n        };\n    }\n    /**\n     * Static Lex Method\n     */\n    static lex(src, options) {\n        const lexer = new _Lexer(options);\n        return lexer.lex(src);\n    }\n    /**\n     * Static Lex Inline Method\n     */\n    static lexInline(src, options) {\n        const lexer = new _Lexer(options);\n        return lexer.inlineTokens(src);\n    }\n    /**\n     * Preprocessing\n     */\n    lex(src) {\n        src = src\n            .replace(/\\r\\n|\\r/g, '\\n');\n        this.blockTokens(src, this.tokens);\n        let next;\n        while (next = this.inlineQueue.shift()) {\n            this.inlineTokens(next.src, next.tokens);\n        }\n        return this.tokens;\n    }\n    blockTokens(src, tokens = []) {\n        if (this.options.pedantic) {\n            src = src.replace(/\\t/g, '    ').replace(/^ +$/gm, '');\n        }\n        else {\n            src = src.replace(/^( *)(\\t+)/gm, (_, leading, tabs) => {\n                return leading + '    '.repeat(tabs.length);\n            });\n        }\n        let token;\n        let lastToken;\n        let cutSrc;\n        let lastParagraphClipped;\n        while (src) {\n            if (this.options.extensions\n                && this.options.extensions.block\n                && this.options.extensions.block.some((extTokenizer) => {\n                    if (token = extTokenizer.call({ lexer: this }, src, tokens)) {\n                        src = src.substring(token.raw.length);\n                        tokens.push(token);\n                        return true;\n                    }\n                    return false;\n                })) {\n                continue;\n            }\n            // newline\n            if (token = this.tokenizer.space(src)) {\n                src = src.substring(token.raw.length);\n                if (token.raw.length === 1 && tokens.length > 0) {\n                    // if there's a single \\n as a spacer, it's terminating the last line,\n                    // so move it there so that we don't get unecessary paragraph tags\n                    tokens[tokens.length - 1].raw += '\\n';\n                }\n                else {\n                    tokens.push(token);\n                }\n                continue;\n            }\n            // code\n            if (token = this.tokenizer.code(src)) {\n                src = src.substring(token.raw.length);\n                lastToken = tokens[tokens.length - 1];\n                // An indented code block cannot interrupt a paragraph.\n                if (lastToken && (lastToken.type === 'paragraph' || lastToken.type === 'text')) {\n                    lastToken.raw += '\\n' + token.raw;\n                    lastToken.text += '\\n' + token.text;\n                    this.inlineQueue[this.inlineQueue.length - 1].src = lastToken.text;\n                }\n                else {\n                    tokens.push(token);\n                }\n                continue;\n            }\n            // fences\n            if (token = this.tokenizer.fences(src)) {\n                src = src.substring(token.raw.length);\n                tokens.push(token);\n                continue;\n            }\n            // heading\n            if (token = this.tokenizer.heading(src)) {\n                src = src.substring(token.raw.length);\n                tokens.push(token);\n                continue;\n            }\n            // hr\n            if (token = this.tokenizer.hr(src)) {\n                src = src.substring(token.raw.length);\n                tokens.push(token);\n                continue;\n            }\n            // blockquote\n            if (token = this.tokenizer.blockquote(src)) {\n                src = src.substring(token.raw.length);\n                tokens.push(token);\n                continue;\n            }\n            // list\n            if (token = this.tokenizer.list(src)) {\n                src = src.substring(token.raw.length);\n                tokens.push(token);\n                continue;\n            }\n            // html\n            if (token = this.tokenizer.html(src)) {\n                src = src.substring(token.raw.length);\n                tokens.push(token);\n                continue;\n            }\n            // def\n            if (token = this.tokenizer.def(src)) {\n                src = src.substring(token.raw.length);\n                lastToken = tokens[tokens.length - 1];\n                if (lastToken && (lastToken.type === 'paragraph' || lastToken.type === 'text')) {\n                    lastToken.raw += '\\n' + token.raw;\n                    lastToken.text += '\\n' + token.raw;\n                    this.inlineQueue[this.inlineQueue.length - 1].src = lastToken.text;\n                }\n                else if (!this.tokens.links[token.tag]) {\n                    this.tokens.links[token.tag] = {\n                        href: token.href,\n                        title: token.title\n                    };\n                }\n                continue;\n            }\n            // table (gfm)\n            if (token = this.tokenizer.table(src)) {\n                src = src.substring(token.raw.length);\n                tokens.push(token);\n                continue;\n            }\n            // lheading\n            if (token = this.tokenizer.lheading(src)) {\n                src = src.substring(token.raw.length);\n                tokens.push(token);\n                continue;\n            }\n            // top-level paragraph\n            // prevent paragraph consuming extensions by clipping 'src' to extension start\n            cutSrc = src;\n            if (this.options.extensions && this.options.extensions.startBlock) {\n                let startIndex = Infinity;\n                const tempSrc = src.slice(1);\n                let tempStart;\n                this.options.extensions.startBlock.forEach((getStartIndex) => {\n                    tempStart = getStartIndex.call({ lexer: this }, tempSrc);\n                    if (typeof tempStart === 'number' && tempStart >= 0) {\n                        startIndex = Math.min(startIndex, tempStart);\n                    }\n                });\n                if (startIndex < Infinity && startIndex >= 0) {\n                    cutSrc = src.substring(0, startIndex + 1);\n                }\n            }\n            if (this.state.top && (token = this.tokenizer.paragraph(cutSrc))) {\n                lastToken = tokens[tokens.length - 1];\n                if (lastParagraphClipped && lastToken.type === 'paragraph') {\n                    lastToken.raw += '\\n' + token.raw;\n                    lastToken.text += '\\n' + token.text;\n                    this.inlineQueue.pop();\n                    this.inlineQueue[this.inlineQueue.length - 1].src = lastToken.text;\n                }\n                else {\n                    tokens.push(token);\n                }\n                lastParagraphClipped = (cutSrc.length !== src.length);\n                src = src.substring(token.raw.length);\n                continue;\n            }\n            // text\n            if (token = this.tokenizer.text(src)) {\n                src = src.substring(token.raw.length);\n                lastToken = tokens[tokens.length - 1];\n                if (lastToken && lastToken.type === 'text') {\n                    lastToken.raw += '\\n' + token.raw;\n                    lastToken.text += '\\n' + token.text;\n                    this.inlineQueue.pop();\n                    this.inlineQueue[this.inlineQueue.length - 1].src = lastToken.text;\n                }\n                else {\n                    tokens.push(token);\n                }\n                continue;\n            }\n            if (src) {\n                const errMsg = 'Infinite loop on byte: ' + src.charCodeAt(0);\n                if (this.options.silent) {\n                    console.error(errMsg);\n                    break;\n                }\n                else {\n                    throw new Error(errMsg);\n                }\n            }\n        }\n        this.state.top = true;\n        return tokens;\n    }\n    inline(src, tokens = []) {\n        this.inlineQueue.push({ src, tokens });\n        return tokens;\n    }\n    /**\n     * Lexing/Compiling\n     */\n    inlineTokens(src, tokens = []) {\n        let token, lastToken, cutSrc;\n        // String with links masked to avoid interference with em and strong\n        let maskedSrc = src;\n        let match;\n        let keepPrevChar, prevChar;\n        // Mask out reflinks\n        if (this.tokens.links) {\n            const links = Object.keys(this.tokens.links);\n            if (links.length > 0) {\n                while ((match = this.tokenizer.rules.inline.reflinkSearch.exec(maskedSrc)) != null) {\n                    if (links.includes(match[0].slice(match[0].lastIndexOf('[') + 1, -1))) {\n                        maskedSrc = maskedSrc.slice(0, match.index) + '[' + 'a'.repeat(match[0].length - 2) + ']' + maskedSrc.slice(this.tokenizer.rules.inline.reflinkSearch.lastIndex);\n                    }\n                }\n            }\n        }\n        // Mask out other blocks\n        while ((match = this.tokenizer.rules.inline.blockSkip.exec(maskedSrc)) != null) {\n            maskedSrc = maskedSrc.slice(0, match.index) + '[' + 'a'.repeat(match[0].length - 2) + ']' + maskedSrc.slice(this.tokenizer.rules.inline.blockSkip.lastIndex);\n        }\n        // Mask out escaped characters\n        while ((match = this.tokenizer.rules.inline.anyPunctuation.exec(maskedSrc)) != null) {\n            maskedSrc = maskedSrc.slice(0, match.index) + '++' + maskedSrc.slice(this.tokenizer.rules.inline.anyPunctuation.lastIndex);\n        }\n        while (src) {\n            if (!keepPrevChar) {\n                prevChar = '';\n            }\n            keepPrevChar = false;\n            // extensions\n            if (this.options.extensions\n                && this.options.extensions.inline\n                && this.options.extensions.inline.some((extTokenizer) => {\n                    if (token = extTokenizer.call({ lexer: this }, src, tokens)) {\n                        src = src.substring(token.raw.length);\n                        tokens.push(token);\n                        return true;\n                    }\n                    return false;\n                })) {\n                continue;\n            }\n            // escape\n            if (token = this.tokenizer.escape(src)) {\n                src = src.substring(token.raw.length);\n                tokens.push(token);\n                continue;\n            }\n            // tag\n            if (token = this.tokenizer.tag(src)) {\n                src = src.substring(token.raw.length);\n                lastToken = tokens[tokens.length - 1];\n                if (lastToken && token.type === 'text' && lastToken.type === 'text') {\n                    lastToken.raw += token.raw;\n                    lastToken.text += token.text;\n                }\n                else {\n                    tokens.push(token);\n                }\n                continue;\n            }\n            // link\n            if (token = this.tokenizer.link(src)) {\n                src = src.substring(token.raw.length);\n                tokens.push(token);\n                continue;\n            }\n            // reflink, nolink\n            if (token = this.tokenizer.reflink(src, this.tokens.links)) {\n                src = src.substring(token.raw.length);\n                lastToken = tokens[tokens.length - 1];\n                if (lastToken && token.type === 'text' && lastToken.type === 'text') {\n                    lastToken.raw += token.raw;\n                    lastToken.text += token.text;\n                }\n                else {\n                    tokens.push(token);\n                }\n                continue;\n            }\n            // em & strong\n            if (token = this.tokenizer.emStrong(src, maskedSrc, prevChar)) {\n                src = src.substring(token.raw.length);\n                tokens.push(token);\n                continue;\n            }\n            // code\n            if (token = this.tokenizer.codespan(src)) {\n                src = src.substring(token.raw.length);\n                tokens.push(token);\n                continue;\n            }\n            // br\n            if (token = this.tokenizer.br(src)) {\n                src = src.substring(token.raw.length);\n                tokens.push(token);\n                continue;\n            }\n            // del (gfm)\n            if (token = this.tokenizer.del(src)) {\n                src = src.substring(token.raw.length);\n                tokens.push(token);\n                continue;\n            }\n            // autolink\n            if (token = this.tokenizer.autolink(src)) {\n                src = src.substring(token.raw.length);\n                tokens.push(token);\n                continue;\n            }\n            // url (gfm)\n            if (!this.state.inLink && (token = this.tokenizer.url(src))) {\n                src = src.substring(token.raw.length);\n                tokens.push(token);\n                continue;\n            }\n            // text\n            // prevent inlineText consuming extensions by clipping 'src' to extension start\n            cutSrc = src;\n            if (this.options.extensions && this.options.extensions.startInline) {\n                let startIndex = Infinity;\n                const tempSrc = src.slice(1);\n                let tempStart;\n                this.options.extensions.startInline.forEach((getStartIndex) => {\n                    tempStart = getStartIndex.call({ lexer: this }, tempSrc);\n                    if (typeof tempStart === 'number' && tempStart >= 0) {\n                        startIndex = Math.min(startIndex, tempStart);\n                    }\n                });\n                if (startIndex < Infinity && startIndex >= 0) {\n                    cutSrc = src.substring(0, startIndex + 1);\n                }\n            }\n            if (token = this.tokenizer.inlineText(cutSrc)) {\n                src = src.substring(token.raw.length);\n                if (token.raw.slice(-1) !== '_') { // Track prevChar before string of ____ started\n                    prevChar = token.raw.slice(-1);\n                }\n                keepPrevChar = true;\n                lastToken = tokens[tokens.length - 1];\n                if (lastToken && lastToken.type === 'text') {\n                    lastToken.raw += token.raw;\n                    lastToken.text += token.text;\n                }\n                else {\n                    tokens.push(token);\n                }\n                continue;\n            }\n            if (src) {\n                const errMsg = 'Infinite loop on byte: ' + src.charCodeAt(0);\n                if (this.options.silent) {\n                    console.error(errMsg);\n                    break;\n                }\n                else {\n                    throw new Error(errMsg);\n                }\n            }\n        }\n        return tokens;\n    }\n}\n\n/**\n * Renderer\n */\nclass _Renderer {\n    options;\n    constructor(options) {\n        this.options = options || _defaults;\n    }\n    code(code, infostring, escaped) {\n        const lang = (infostring || '').match(/^\\S*/)?.[0];\n        code = code.replace(/\\n$/, '') + '\\n';\n        if (!lang) {\n            return '<pre><code>'\n                + (escaped ? code : escape(code, true))\n                + '</code></pre>\\n';\n        }\n        return '<pre><code class=\"language-'\n            + escape(lang)\n            + '\">'\n            + (escaped ? code : escape(code, true))\n            + '</code></pre>\\n';\n    }\n    blockquote(quote) {\n        return `<blockquote>\\n${quote}</blockquote>\\n`;\n    }\n    html(html, block) {\n        return html;\n    }\n    heading(text, level, raw) {\n        // ignore IDs\n        return `<h${level}>${text}</h${level}>\\n`;\n    }\n    hr() {\n        return '<hr>\\n';\n    }\n    list(body, ordered, start) {\n        const type = ordered ? 'ol' : 'ul';\n        const startatt = (ordered && start !== 1) ? (' start=\"' + start + '\"') : '';\n        return '<' + type + startatt + '>\\n' + body + '</' + type + '>\\n';\n    }\n    listitem(text, task, checked) {\n        return `<li>${text}</li>\\n`;\n    }\n    checkbox(checked) {\n        return '<input '\n            + (checked ? 'checked=\"\" ' : '')\n            + 'disabled=\"\" type=\"checkbox\">';\n    }\n    paragraph(text) {\n        return `<p>${text}</p>\\n`;\n    }\n    table(header, body) {\n        if (body)\n            body = `<tbody>${body}</tbody>`;\n        return '<table>\\n'\n            + '<thead>\\n'\n            + header\n            + '</thead>\\n'\n            + body\n            + '</table>\\n';\n    }\n    tablerow(content) {\n        return `<tr>\\n${content}</tr>\\n`;\n    }\n    tablecell(content, flags) {\n        const type = flags.header ? 'th' : 'td';\n        const tag = flags.align\n            ? `<${type} align=\"${flags.align}\">`\n            : `<${type}>`;\n        return tag + content + `</${type}>\\n`;\n    }\n    /**\n     * span level renderer\n     */\n    strong(text) {\n        return `<strong>${text}</strong>`;\n    }\n    em(text) {\n        return `<em>${text}</em>`;\n    }\n    codespan(text) {\n        return `<code>${text}</code>`;\n    }\n    br() {\n        return '<br>';\n    }\n    del(text) {\n        return `<del>${text}</del>`;\n    }\n    link(href, title, text) {\n        const cleanHref = cleanUrl(href);\n        if (cleanHref === null) {\n            return text;\n        }\n        href = cleanHref;\n        let out = '<a href=\"' + href + '\"';\n        if (title) {\n            out += ' title=\"' + title + '\"';\n        }\n        out += '>' + text + '</a>';\n        return out;\n    }\n    image(href, title, text) {\n        const cleanHref = cleanUrl(href);\n        if (cleanHref === null) {\n            return text;\n        }\n        href = cleanHref;\n        let out = `<img src=\"${href}\" alt=\"${text}\"`;\n        if (title) {\n            out += ` title=\"${title}\"`;\n        }\n        out += '>';\n        return out;\n    }\n    text(text) {\n        return text;\n    }\n}\n\n/**\n * TextRenderer\n * returns only the textual part of the token\n */\nclass _TextRenderer {\n    // no need for block level renderers\n    strong(text) {\n        return text;\n    }\n    em(text) {\n        return text;\n    }\n    codespan(text) {\n        return text;\n    }\n    del(text) {\n        return text;\n    }\n    html(text) {\n        return text;\n    }\n    text(text) {\n        return text;\n    }\n    link(href, title, text) {\n        return '' + text;\n    }\n    image(href, title, text) {\n        return '' + text;\n    }\n    br() {\n        return '';\n    }\n}\n\n/**\n * Parsing & Compiling\n */\nclass _Parser {\n    options;\n    renderer;\n    textRenderer;\n    constructor(options) {\n        this.options = options || _defaults;\n        this.options.renderer = this.options.renderer || new _Renderer();\n        this.renderer = this.options.renderer;\n        this.renderer.options = this.options;\n        this.textRenderer = new _TextRenderer();\n    }\n    /**\n     * Static Parse Method\n     */\n    static parse(tokens, options) {\n        const parser = new _Parser(options);\n        return parser.parse(tokens);\n    }\n    /**\n     * Static Parse Inline Method\n     */\n    static parseInline(tokens, options) {\n        const parser = new _Parser(options);\n        return parser.parseInline(tokens);\n    }\n    /**\n     * Parse Loop\n     */\n    parse(tokens, top = true) {\n        let out = '';\n        for (let i = 0; i < tokens.length; i++) {\n            const token = tokens[i];\n            // Run any renderer extensions\n            if (this.options.extensions && this.options.extensions.renderers && this.options.extensions.renderers[token.type]) {\n                const genericToken = token;\n                const ret = this.options.extensions.renderers[genericToken.type].call({ parser: this }, genericToken);\n                if (ret !== false || !['space', 'hr', 'heading', 'code', 'table', 'blockquote', 'list', 'html', 'paragraph', 'text'].includes(genericToken.type)) {\n                    out += ret || '';\n                    continue;\n                }\n            }\n            switch (token.type) {\n                case 'space': {\n                    continue;\n                }\n                case 'hr': {\n                    out += this.renderer.hr();\n                    continue;\n                }\n                case 'heading': {\n                    const headingToken = token;\n                    out += this.renderer.heading(this.parseInline(headingToken.tokens), headingToken.depth, unescape(this.parseInline(headingToken.tokens, this.textRenderer)));\n                    continue;\n                }\n                case 'code': {\n                    const codeToken = token;\n                    out += this.renderer.code(codeToken.text, codeToken.lang, !!codeToken.escaped);\n                    continue;\n                }\n                case 'table': {\n                    const tableToken = token;\n                    let header = '';\n                    // header\n                    let cell = '';\n                    for (let j = 0; j < tableToken.header.length; j++) {\n                        cell += this.renderer.tablecell(this.parseInline(tableToken.header[j].tokens), { header: true, align: tableToken.align[j] });\n                    }\n                    header += this.renderer.tablerow(cell);\n                    let body = '';\n                    for (let j = 0; j < tableToken.rows.length; j++) {\n                        const row = tableToken.rows[j];\n                        cell = '';\n                        for (let k = 0; k < row.length; k++) {\n                            cell += this.renderer.tablecell(this.parseInline(row[k].tokens), { header: false, align: tableToken.align[k] });\n                        }\n                        body += this.renderer.tablerow(cell);\n                    }\n                    out += this.renderer.table(header, body);\n                    continue;\n                }\n                case 'blockquote': {\n                    const blockquoteToken = token;\n                    const body = this.parse(blockquoteToken.tokens);\n                    out += this.renderer.blockquote(body);\n                    continue;\n                }\n                case 'list': {\n                    const listToken = token;\n                    const ordered = listToken.ordered;\n                    const start = listToken.start;\n                    const loose = listToken.loose;\n                    let body = '';\n                    for (let j = 0; j < listToken.items.length; j++) {\n                        const item = listToken.items[j];\n                        const checked = item.checked;\n                        const task = item.task;\n                        let itemBody = '';\n                        if (item.task) {\n                            const checkbox = this.renderer.checkbox(!!checked);\n                            if (loose) {\n                                if (item.tokens.length > 0 && item.tokens[0].type === 'paragraph') {\n                                    item.tokens[0].text = checkbox + ' ' + item.tokens[0].text;\n                                    if (item.tokens[0].tokens && item.tokens[0].tokens.length > 0 && item.tokens[0].tokens[0].type === 'text') {\n                                        item.tokens[0].tokens[0].text = checkbox + ' ' + item.tokens[0].tokens[0].text;\n                                    }\n                                }\n                                else {\n                                    item.tokens.unshift({\n                                        type: 'text',\n                                        text: checkbox + ' '\n                                    });\n                                }\n                            }\n                            else {\n                                itemBody += checkbox + ' ';\n                            }\n                        }\n                        itemBody += this.parse(item.tokens, loose);\n                        body += this.renderer.listitem(itemBody, task, !!checked);\n                    }\n                    out += this.renderer.list(body, ordered, start);\n                    continue;\n                }\n                case 'html': {\n                    const htmlToken = token;\n                    out += this.renderer.html(htmlToken.text, htmlToken.block);\n                    continue;\n                }\n                case 'paragraph': {\n                    const paragraphToken = token;\n                    out += this.renderer.paragraph(this.parseInline(paragraphToken.tokens));\n                    continue;\n                }\n                case 'text': {\n                    let textToken = token;\n                    let body = textToken.tokens ? this.parseInline(textToken.tokens) : textToken.text;\n                    while (i + 1 < tokens.length && tokens[i + 1].type === 'text') {\n                        textToken = tokens[++i];\n                        body += '\\n' + (textToken.tokens ? this.parseInline(textToken.tokens) : textToken.text);\n                    }\n                    out += top ? this.renderer.paragraph(body) : body;\n                    continue;\n                }\n                default: {\n                    const errMsg = 'Token with \"' + token.type + '\" type was not found.';\n                    if (this.options.silent) {\n                        console.error(errMsg);\n                        return '';\n                    }\n                    else {\n                        throw new Error(errMsg);\n                    }\n                }\n            }\n        }\n        return out;\n    }\n    /**\n     * Parse Inline Tokens\n     */\n    parseInline(tokens, renderer) {\n        renderer = renderer || this.renderer;\n        let out = '';\n        for (let i = 0; i < tokens.length; i++) {\n            const token = tokens[i];\n            // Run any renderer extensions\n            if (this.options.extensions && this.options.extensions.renderers && this.options.extensions.renderers[token.type]) {\n                const ret = this.options.extensions.renderers[token.type].call({ parser: this }, token);\n                if (ret !== false || !['escape', 'html', 'link', 'image', 'strong', 'em', 'codespan', 'br', 'del', 'text'].includes(token.type)) {\n                    out += ret || '';\n                    continue;\n                }\n            }\n            switch (token.type) {\n                case 'escape': {\n                    const escapeToken = token;\n                    out += renderer.text(escapeToken.text);\n                    break;\n                }\n                case 'html': {\n                    const tagToken = token;\n                    out += renderer.html(tagToken.text);\n                    break;\n                }\n                case 'link': {\n                    const linkToken = token;\n                    out += renderer.link(linkToken.href, linkToken.title, this.parseInline(linkToken.tokens, renderer));\n                    break;\n                }\n                case 'image': {\n                    const imageToken = token;\n                    out += renderer.image(imageToken.href, imageToken.title, imageToken.text);\n                    break;\n                }\n                case 'strong': {\n                    const strongToken = token;\n                    out += renderer.strong(this.parseInline(strongToken.tokens, renderer));\n                    break;\n                }\n                case 'em': {\n                    const emToken = token;\n                    out += renderer.em(this.parseInline(emToken.tokens, renderer));\n                    break;\n                }\n                case 'codespan': {\n                    const codespanToken = token;\n                    out += renderer.codespan(codespanToken.text);\n                    break;\n                }\n                case 'br': {\n                    out += renderer.br();\n                    break;\n                }\n                case 'del': {\n                    const delToken = token;\n                    out += renderer.del(this.parseInline(delToken.tokens, renderer));\n                    break;\n                }\n                case 'text': {\n                    const textToken = token;\n                    out += renderer.text(textToken.text);\n                    break;\n                }\n                default: {\n                    const errMsg = 'Token with \"' + token.type + '\" type was not found.';\n                    if (this.options.silent) {\n                        console.error(errMsg);\n                        return '';\n                    }\n                    else {\n                        throw new Error(errMsg);\n                    }\n                }\n            }\n        }\n        return out;\n    }\n}\n\nclass _Hooks {\n    options;\n    constructor(options) {\n        this.options = options || _defaults;\n    }\n    static passThroughHooks = new Set([\n        'preprocess',\n        'postprocess'\n    ]);\n    /**\n     * Process markdown before marked\n     */\n    preprocess(markdown) {\n        return markdown;\n    }\n    /**\n     * Process HTML after marked is finished\n     */\n    postprocess(html) {\n        return html;\n    }\n}\n\nclass Marked {\n    defaults = _getDefaults();\n    options = this.setOptions;\n    parse = this.#parseMarkdown(_Lexer.lex, _Parser.parse);\n    parseInline = this.#parseMarkdown(_Lexer.lexInline, _Parser.parseInline);\n    Parser = _Parser;\n    parser = _Parser.parse;\n    Renderer = _Renderer;\n    TextRenderer = _TextRenderer;\n    Lexer = _Lexer;\n    lexer = _Lexer.lex;\n    Tokenizer = _Tokenizer;\n    Hooks = _Hooks;\n    constructor(...args) {\n        this.use(...args);\n    }\n    /**\n     * Run callback for every token\n     */\n    walkTokens(tokens, callback) {\n        let values = [];\n        for (const token of tokens) {\n            values = values.concat(callback.call(this, token));\n            switch (token.type) {\n                case 'table': {\n                    const tableToken = token;\n                    for (const cell of tableToken.header) {\n                        values = values.concat(this.walkTokens(cell.tokens, callback));\n                    }\n                    for (const row of tableToken.rows) {\n                        for (const cell of row) {\n                            values = values.concat(this.walkTokens(cell.tokens, callback));\n                        }\n                    }\n                    break;\n                }\n                case 'list': {\n                    const listToken = token;\n                    values = values.concat(this.walkTokens(listToken.items, callback));\n                    break;\n                }\n                default: {\n                    const genericToken = token;\n                    if (this.defaults.extensions?.childTokens?.[genericToken.type]) {\n                        this.defaults.extensions.childTokens[genericToken.type].forEach((childTokens) => {\n                            values = values.concat(this.walkTokens(genericToken[childTokens], callback));\n                        });\n                    }\n                    else if (genericToken.tokens) {\n                        values = values.concat(this.walkTokens(genericToken.tokens, callback));\n                    }\n                }\n            }\n        }\n        return values;\n    }\n    use(...args) {\n        const extensions = this.defaults.extensions || { renderers: {}, childTokens: {} };\n        args.forEach((pack) => {\n            // copy options to new object\n            const opts = { ...pack };\n            // set async to true if it was set to true before\n            opts.async = this.defaults.async || opts.async || false;\n            // ==-- Parse \"addon\" extensions --== //\n            if (pack.extensions) {\n                pack.extensions.forEach((ext) => {\n                    if (!ext.name) {\n                        throw new Error('extension name required');\n                    }\n                    if ('renderer' in ext) { // Renderer extensions\n                        const prevRenderer = extensions.renderers[ext.name];\n                        if (prevRenderer) {\n                            // Replace extension with func to run new extension but fall back if false\n                            extensions.renderers[ext.name] = function (...args) {\n                                let ret = ext.renderer.apply(this, args);\n                                if (ret === false) {\n                                    ret = prevRenderer.apply(this, args);\n                                }\n                                return ret;\n                            };\n                        }\n                        else {\n                            extensions.renderers[ext.name] = ext.renderer;\n                        }\n                    }\n                    if ('tokenizer' in ext) { // Tokenizer Extensions\n                        if (!ext.level || (ext.level !== 'block' && ext.level !== 'inline')) {\n                            throw new Error(\"extension level must be 'block' or 'inline'\");\n                        }\n                        const extLevel = extensions[ext.level];\n                        if (extLevel) {\n                            extLevel.unshift(ext.tokenizer);\n                        }\n                        else {\n                            extensions[ext.level] = [ext.tokenizer];\n                        }\n                        if (ext.start) { // Function to check for start of token\n                            if (ext.level === 'block') {\n                                if (extensions.startBlock) {\n                                    extensions.startBlock.push(ext.start);\n                                }\n                                else {\n                                    extensions.startBlock = [ext.start];\n                                }\n                            }\n                            else if (ext.level === 'inline') {\n                                if (extensions.startInline) {\n                                    extensions.startInline.push(ext.start);\n                                }\n                                else {\n                                    extensions.startInline = [ext.start];\n                                }\n                            }\n                        }\n                    }\n                    if ('childTokens' in ext && ext.childTokens) { // Child tokens to be visited by walkTokens\n                        extensions.childTokens[ext.name] = ext.childTokens;\n                    }\n                });\n                opts.extensions = extensions;\n            }\n            // ==-- Parse \"overwrite\" extensions --== //\n            if (pack.renderer) {\n                const renderer = this.defaults.renderer || new _Renderer(this.defaults);\n                for (const prop in pack.renderer) {\n                    const rendererFunc = pack.renderer[prop];\n                    const rendererKey = prop;\n                    const prevRenderer = renderer[rendererKey];\n                    // Replace renderer with func to run extension, but fall back if false\n                    renderer[rendererKey] = (...args) => {\n                        let ret = rendererFunc.apply(renderer, args);\n                        if (ret === false) {\n                            ret = prevRenderer.apply(renderer, args);\n                        }\n                        return ret || '';\n                    };\n                }\n                opts.renderer = renderer;\n            }\n            if (pack.tokenizer) {\n                const tokenizer = this.defaults.tokenizer || new _Tokenizer(this.defaults);\n                for (const prop in pack.tokenizer) {\n                    const tokenizerFunc = pack.tokenizer[prop];\n                    const tokenizerKey = prop;\n                    const prevTokenizer = tokenizer[tokenizerKey];\n                    // Replace tokenizer with func to run extension, but fall back if false\n                    tokenizer[tokenizerKey] = (...args) => {\n                        let ret = tokenizerFunc.apply(tokenizer, args);\n                        if (ret === false) {\n                            ret = prevTokenizer.apply(tokenizer, args);\n                        }\n                        return ret;\n                    };\n                }\n                opts.tokenizer = tokenizer;\n            }\n            // ==-- Parse Hooks extensions --== //\n            if (pack.hooks) {\n                const hooks = this.defaults.hooks || new _Hooks();\n                for (const prop in pack.hooks) {\n                    const hooksFunc = pack.hooks[prop];\n                    const hooksKey = prop;\n                    const prevHook = hooks[hooksKey];\n                    if (_Hooks.passThroughHooks.has(prop)) {\n                        hooks[hooksKey] = (arg) => {\n                            if (this.defaults.async) {\n                                return Promise.resolve(hooksFunc.call(hooks, arg)).then(ret => {\n                                    return prevHook.call(hooks, ret);\n                                });\n                            }\n                            const ret = hooksFunc.call(hooks, arg);\n                            return prevHook.call(hooks, ret);\n                        };\n                    }\n                    else {\n                        hooks[hooksKey] = (...args) => {\n                            let ret = hooksFunc.apply(hooks, args);\n                            if (ret === false) {\n                                ret = prevHook.apply(hooks, args);\n                            }\n                            return ret;\n                        };\n                    }\n                }\n                opts.hooks = hooks;\n            }\n            // ==-- Parse WalkTokens extensions --== //\n            if (pack.walkTokens) {\n                const walkTokens = this.defaults.walkTokens;\n                const packWalktokens = pack.walkTokens;\n                opts.walkTokens = function (token) {\n                    let values = [];\n                    values.push(packWalktokens.call(this, token));\n                    if (walkTokens) {\n                        values = values.concat(walkTokens.call(this, token));\n                    }\n                    return values;\n                };\n            }\n            this.defaults = { ...this.defaults, ...opts };\n        });\n        return this;\n    }\n    setOptions(opt) {\n        this.defaults = { ...this.defaults, ...opt };\n        return this;\n    }\n    #parseMarkdown(lexer, parser) {\n        return (src, options) => {\n            const origOpt = { ...options };\n            const opt = { ...this.defaults, ...origOpt };\n            // Show warning if an extension set async to true but the parse was called with async: false\n            if (this.defaults.async === true && origOpt.async === false) {\n                if (!opt.silent) {\n                    console.warn('marked(): The async option was set to true by an extension. The async: false option sent to parse will be ignored.');\n                }\n                opt.async = true;\n            }\n            const throwError = this.#onError(!!opt.silent, !!opt.async);\n            // throw error in case of non string input\n            if (typeof src === 'undefined' || src === null) {\n                return throwError(new Error('marked(): input parameter is undefined or null'));\n            }\n            if (typeof src !== 'string') {\n                return throwError(new Error('marked(): input parameter is of type '\n                    + Object.prototype.toString.call(src) + ', string expected'));\n            }\n            if (opt.hooks) {\n                opt.hooks.options = opt;\n            }\n            if (opt.async) {\n                return Promise.resolve(opt.hooks ? opt.hooks.preprocess(src) : src)\n                    .then(src => lexer(src, opt))\n                    .then(tokens => opt.walkTokens ? Promise.all(this.walkTokens(tokens, opt.walkTokens)).then(() => tokens) : tokens)\n                    .then(tokens => parser(tokens, opt))\n                    .then(html => opt.hooks ? opt.hooks.postprocess(html) : html)\n                    .catch(throwError);\n            }\n            try {\n                if (opt.hooks) {\n                    src = opt.hooks.preprocess(src);\n                }\n                const tokens = lexer(src, opt);\n                if (opt.walkTokens) {\n                    this.walkTokens(tokens, opt.walkTokens);\n                }\n                let html = parser(tokens, opt);\n                if (opt.hooks) {\n                    html = opt.hooks.postprocess(html);\n                }\n                return html;\n            }\n            catch (e) {\n                return throwError(e);\n            }\n        };\n    }\n    #onError(silent, async) {\n        return (e) => {\n            e.message += '\\nPlease report this to https://github.com/markedjs/marked.';\n            if (silent) {\n                const msg = '<p>An error occurred:</p><pre>'\n                    + escape(e.message + '', true)\n                    + '</pre>';\n                if (async) {\n                    return Promise.resolve(msg);\n                }\n                return msg;\n            }\n            if (async) {\n                return Promise.reject(e);\n            }\n            throw e;\n        };\n    }\n}\n\nconst markedInstance = new Marked();\nfunction marked(src, opt) {\n    return markedInstance.parse(src, opt);\n}\n/**\n * Sets the default options.\n *\n * @param options Hash of options\n */\nmarked.options =\n    marked.setOptions = function (options) {\n        markedInstance.setOptions(options);\n        marked.defaults = markedInstance.defaults;\n        changeDefaults(marked.defaults);\n        return marked;\n    };\n/**\n * Gets the original marked default options.\n */\nmarked.getDefaults = _getDefaults;\nmarked.defaults = _defaults;\n/**\n * Use Extension\n */\nmarked.use = function (...args) {\n    markedInstance.use(...args);\n    marked.defaults = markedInstance.defaults;\n    changeDefaults(marked.defaults);\n    return marked;\n};\n/**\n * Run callback for every token\n */\nmarked.walkTokens = function (tokens, callback) {\n    return markedInstance.walkTokens(tokens, callback);\n};\n/**\n * Compiles markdown to HTML without enclosing `p` tag.\n *\n * @param src String of markdown source to be compiled\n * @param options Hash of options\n * @return String of compiled HTML\n */\nmarked.parseInline = markedInstance.parseInline;\n/**\n * Expose\n */\nmarked.Parser = _Parser;\nmarked.parser = _Parser.parse;\nmarked.Renderer = _Renderer;\nmarked.TextRenderer = _TextRenderer;\nmarked.Lexer = _Lexer;\nmarked.lexer = _Lexer.lex;\nmarked.Tokenizer = _Tokenizer;\nmarked.Hooks = _Hooks;\nmarked.parse = marked;\nconst options = marked.options;\nconst setOptions = marked.setOptions;\nconst use = marked.use;\nconst walkTokens = marked.walkTokens;\nconst parseInline = marked.parseInline;\nconst parse = marked;\nconst parser = _Parser.parse;\nconst lexer = _Lexer.lex;\n\nexport { _Hooks as Hooks, _Lexer as Lexer, Marked, _Parser as Parser, _Renderer as Renderer, _TextRenderer as TextRenderer, _Tokenizer as Tokenizer, _defaults as defaults, _getDefaults as getDefaults, lexer, marked, options, parse, parseInline, parser, setOptions, use, walkTokens };\n//# sourceMappingURL=marked.esm.js.map\n","import { marked } from \"marked\";\r\n// import { Marked } from \"marked\";\r\n// import { markedHighlight } from \"marked-highlight\";\r\n// import prism from \"./prism/prism\";\r\n// import \"prismjs/themes/prism.css\";\r\n// import katex from \"katex\";\r\n// import \"katex/dist/katex.min.css\";\r\n//https://cdn.jsdelivr.net/npm/katex@0.16.8/dist/katex.min.css\r\n// const marked = new Marked(\r\n//   markedHighlight({\r\n//     // langPrefix: \"hljs language-\",\r\n//     highlight(code, lang) {\r\n//       if (prism.languages[lang]) {\r\n//         return prism.highlight(code, prism.languages[lang], lang);\r\n//       } else {\r\n//         return code;\r\n//       }\r\n//     },\r\n//   })\r\n// );\r\n\r\nconst katexExtension = {\r\n  name: \"math\",\r\n  level: \"inline\",\r\n  start(src) {\r\n    let index = src.match(/\\$/)?.index;\r\n    return index;\r\n  },\r\n  tokenizer(src, tokens) {\r\n    const blockRule = /^\\$\\$((\\\\.|[^\\$\\\\])+)\\$\\$/;\r\n    const inlineRule = /^\\$((\\\\.|[^\\$\\\\])+)\\$/;\r\n    let match;\r\n    if ((match = blockRule.exec(src))) {\r\n      return {\r\n        type: \"math\",\r\n        raw: match[0],\r\n        text: match[1].trim(),\r\n        mathLevel: \"block\",\r\n      };\r\n    } else if ((match = inlineRule.exec(src))) {\r\n      return {\r\n        type: \"math\",\r\n        raw: match[0],\r\n        text: match[1].trim(),\r\n        mathLevel: \"inline\",\r\n      };\r\n    }\r\n  },\r\n  renderer(token) {\r\n    if (token.mathLevel === \"block\") {\r\n      // return katex.renderToString(token.text, {\r\n      //   throwOnError: false,\r\n      //   displayMode: true,\r\n      // });\r\n      return MathJax.tex2svg(token.text, { display: true }).outerHTML;\r\n      // return MathJax.tex2mml(token.text, { display: true }).outerHTML;\r\n    } else if (token.mathLevel === \"inline\") {\r\n      // return katex.renderToString(token.text, {\r\n      //   throwOnError: false,\r\n      //   displayMode: false,\r\n      // });\r\n      return MathJax.tex2svg(token.text, { display: false }).outerHTML;\r\n      // return MathJax.tex2mml(token.text, { display: false }).outerHTML;\r\n    }\r\n  },\r\n};\r\n\r\nmarked.use({\r\n  extensions: [katexExtension],\r\n});\r\n\r\nexport default function ParseMarkdown(text) {\r\n  return marked.parse(text).replace(/>\\n</g, \"><\");\r\n}\r\n","/**\r\n * support markdow syntax\r\n */\r\nconst markdownStyleTag = \"pluginMarkdown=1;\";\r\n\r\nimport ParseMarkdown from \"./parseMd\";\r\n\r\nDraw.loadPlugin(function (ui) {\r\n  try {\r\n    mxResources.parse(\"useMarkdown=use markdown syntax\");\r\n    mxResources.parse(\"noMarkdown=don't use markdown syntax\");\r\n    // Adds action\r\n    AddAction(ui);\r\n    AddPopupMenuItem(ui);\r\n    ui.editor.graph.addListener(mxEvent.DOUBLE_CLICK, (sender, evt) =>\r\n      HandleEditMarkdown(ui, sender, evt)\r\n    );\r\n  } catch (e) {\r\n    console.log(e);\r\n  }\r\n});\r\nfunction isCellPluginMarkdown(cell) {\r\n  if (!cell) {\r\n    return false;\r\n  }\r\n  if (cell.style.indexOf(markdownStyleTag) < 0) {\r\n    return false;\r\n  }\r\n  return true;\r\n}\r\nfunction AddPopupMenuItem(ui) {\r\n  const uiAddPopupMenuItems = ui.menus.addPopupMenuItems;\r\n  const graph = ui.editor.graph;\r\n  ui.menus.addPopupMenuItems = function (menu, cell, evt) {\r\n    uiAddPopupMenuItems.apply(this, arguments);\r\n    if (graph.isSelectionEmpty()) return;\r\n    const curCell = graph.getSelectionCell();\r\n    if (isCellPluginMarkdown(curCell)) {\r\n      this.addMenuItems(menu, [\"-\", \"noMarkdown\"], null, evt);\r\n    } else {\r\n      this.addMenuItems(menu, [\"-\", \"useMarkdown\"], null, evt);\r\n    }\r\n  };\r\n}\r\n\r\nfunction escapeHtml(text) {\r\n  // https://stackoverflow.com/questions/6234773/can-i-escape-html-special-chars-in-javascript\r\n  // Warning: it does not escape quotes so you can't use the output inside attribute values in HTML code.\r\n  // [](https://stackoverflow.com/questions/6234773/can-i-escape-html-special-chars-in-javascript#:~:text=Warning:%20it%20does%20not%20escape%20quotes%20so%20you%20can't%20use%20the%20output%20inside%20attribute%20values%20in%20HTML%20code)\r\n\r\n  // const textNode = document.createTextNode(text);\r\n  // const div = document.createElement(\"div\");\r\n  // div.appendChild(textNode);\r\n  // return div.innerHTML;\r\n\r\n  return text\r\n    .replace(/&/g, \"&amp;\")\r\n    .replace(/</g, \"&lt;\")\r\n    .replace(/>/g, \"&gt;\")\r\n    .replace(/\"/g, \"&quot;\")\r\n    .replace(/'/g, \"&#039;\");\r\n}\r\n\r\nfunction unescapeHtml(escapeHtml) {\r\n  // const doc = new DOMParser().parseFromString(escapeHtml, \"text/html\");\r\n  // return doc.documentElement.textContent;\r\n\r\n  // https://www.educative.io/answers/how-to-escape-unescape-html-characters-in-string-in-javascript\r\n  return escapeHtml\r\n    .replace(/&lt;/g, \"<\")\r\n    .replace(/&gt;/g, \">\")\r\n    .replace(/&quot;/g, '\"')\r\n    .replace(/&#039;/g, \"'\")\r\n    .replace(/&amp;/g, \"&\");\r\n}\r\n\r\nfunction AddAction(ui) {\r\n  ui.actions.addAction(\"useMarkdown\", function () {\r\n    const graph = ui.editor.graph;\r\n    graph.getModel().beginUpdate();\r\n    const curCell = graph.getSelectionCell();\r\n    curCell.setStyle(markdownStyleTag + curCell.style);\r\n    // wrap actual content with div tag\r\n    // curCell.setValue(`<div data-content=\"${unescapeStr}\">${unescapeStr}</div>`);\r\n    graph.labelChanged(curCell, WrapMarkdown(unescapeHtml(curCell.value))); // current content is escaped\r\n    graph.getModel().endUpdate();\r\n  });\r\n  ui.actions.addAction(\"noMarkdown\", function () {\r\n    const graph = ui.editor.graph;\r\n    graph.getModel().beginUpdate();\r\n    const curCell = graph.getSelectionCell();\r\n    curCell.setStyle(curCell.style.replace(markdownStyleTag, \"\"));\r\n    graph.labelChanged(curCell, escapeHtml(ExtractMarkdown(curCell.value))); // current content is html string\r\n    graph.getModel().endUpdate();\r\n  });\r\n}\r\n\r\nfunction HandleEditMarkdown(ui, sender, evt) {\r\n  const cell = evt.getProperty(\"cell\");\r\n  if (isCellPluginMarkdown(cell)) {\r\n    const dlg = new DialogMarkdown(ui, cell);\r\n    evt.consume();\r\n  }\r\n}\r\n\r\n/**\r\n *\r\n * @param {string} text html string\r\n * @returns\r\n */\r\nfunction ExtractMarkdown(text) {\r\n  const div = document.createElement(\"div\");\r\n  div.innerHTML = text;\r\n  return unescapeHtml(div.firstChild.getAttribute(\"data-content\"));\r\n}\r\n/**\r\n *\r\n * @param {string} text markdown string, not escape\r\n * @returns the string in data-content is escaped\r\n */\r\nfunction WrapMarkdown(text) {\r\n  return `<div data-content=\"${escapeHtml(text)}\">${ParseMarkdown(text)}</div>`;\r\n}\r\n\r\nclass DialogMarkdown {\r\n  constructor(ui, cell) {\r\n    this.state = { ui, cell };\r\n    const div = document.createElement(\"div\");\r\n    div.style =\r\n      \"display: flex; flex-direction: column; padding: 16px; height: inherit;\";\r\n    div.innerHTML = `\r\n       <div style=\"flex: 1; display: flex; flex-direction: row; overflow-y: auto\">\r\n        <textarea id=\"plugin_markdown_textarea\" style=\"width: 40%; resize: horizontal;\"></textarea>\r\n        <div id=\"plugin_markdown_preview\" style=\"flex: 1; text-align: center; overflow-y: auto\"></div>\r\n       </div>\r\n       <div style=\"flex: 0 0 4em; display: flex; flex-direction: row; align-items: end\">\r\n        <div id=\"plugin_markdown_buttons\" style=\"flex: initial; text-align: right; align-self: flex-end;\">\r\n        <p style=\"margin-block: unset; font-size: 90%\"> \r\n          <br />Help | \r\n          <a target=\"_blank\" href=\"https://marked.js.org/\">Syntax</a> |\r\n        </p><br /></div>\r\n       </div>\r\n       <div style=\"flex: 0 0 32px;\"></div>\r\n      `;\r\n\r\n    const textarea = div.querySelector(\"#plugin_markdown_textarea\");\r\n    textarea.value = ExtractMarkdown(cell.value);\r\n    // textarea.value = ui.editor.graph.convertValueToString(\r\n    //   this.state.cell\r\n    // ); // Compatble with cell properties\r\n\r\n    const preview = div.querySelector(\"#plugin_markdown_preview\");\r\n    const buttons = div.querySelector(\"#plugin_markdown_buttons\");\r\n\r\n    let win_width = 800;\r\n    let win_height = 640;\r\n    if (ui.diagramContainer.clientWidth < win_width)\r\n      win_width = ui.diagramContainer.clientWidth - 20;\r\n    if (ui.diagramContainer.clientHeight < win_height)\r\n      win_height = ui.diagramContainer.clientHeight - 20;\r\n\r\n    const win = new mxWindow(\r\n      \"Markdown parsed by marked\",\r\n      div,\r\n      (ui.diagramContainer.clientWidth - win_width) / 2 +\r\n        ui.diagramContainer.offsetLeft,\r\n      (ui.diagramContainer.clientHeight - win_height) / 2 +\r\n        ui.diagramContainer.offsetTop,\r\n      win_width,\r\n      win_height,\r\n      true,\r\n      true\r\n    );\r\n    win.setResizable(true);\r\n    win.setMaximizable(true);\r\n    win.setClosable(true);\r\n\r\n    // Enables dropping files\r\n    if (Graph.fileSupport) {\r\n      function handleDrop(evt) {\r\n        evt.stopPropagation();\r\n        evt.preventDefault();\r\n\r\n        if (evt.dataTransfer.files.length > 0) {\r\n          const file = evt.dataTransfer.files[0];\r\n\r\n          const reader = new FileReader();\r\n          reader.onload = function (e) {\r\n            textarea.value = e.target.result;\r\n          };\r\n          reader.readAsText(file);\r\n        }\r\n      }\r\n\r\n      function handleDragOver(evt) {\r\n        evt.stopPropagation();\r\n        evt.preventDefault();\r\n      }\r\n\r\n      function previewMarkdown() {\r\n        try {\r\n          // Display preview\r\n          preview.innerHTML = ParseMarkdown(textarea.value);\r\n        } catch (e) {\r\n          console.log(e);\r\n        }\r\n      }\r\n\r\n      function handleInput(evt) {\r\n        evt.stopPropagation();\r\n        evt.preventDefault();\r\n        previewMarkdown();\r\n      }\r\n\r\n      previewMarkdown();\r\n      // Setup the dnd listeners.\r\n      textarea.addEventListener(\"dragover\", handleDragOver, false);\r\n      textarea.addEventListener(\"drop\", handleDrop, false);\r\n      textarea.addEventListener(\"input\", handleInput, false);\r\n    }\r\n\r\n    const cancelBtn = mxUtils.button(mxResources.get(\"close\"), () => {\r\n      win.destroy();\r\n    });\r\n\r\n    cancelBtn.className = \"geBtn\";\r\n\r\n    if (ui.editor.cancelFirst) {\r\n      buttons.appendChild(cancelBtn);\r\n    }\r\n\r\n    const okBtn = mxUtils.button(mxResources.get(\"apply\"), (evt) => {\r\n      this.updateContent(textarea.value);\r\n      win.destroy();\r\n    });\r\n\r\n    buttons.appendChild(okBtn);\r\n\r\n    okBtn.className = \"geBtn gePrimaryBtn\";\r\n\r\n    if (!ui.editor.cancelFirst) {\r\n      buttons.appendChild(cancelBtn);\r\n    }\r\n\r\n    win.show();\r\n    textarea.focus();\r\n  }\r\n  updateContent(text) {\r\n    // show spin\r\n    const ui = this.state.ui;\r\n    const cell = this.state.cell;\r\n    if (ui.spinner.spin(document.body, mxResources.get(\"inserting\"))) {\r\n      const graph = ui.editor.graph;\r\n      graph.getModel().beginUpdate();\r\n      graph.labelChanged(cell, WrapMarkdown(text));\r\n      graph.getModel().endUpdate();\r\n      ui.spinner.stop(); // stop spin\r\n\r\n      if (cell != null) {\r\n        graph.setSelectionCell(cell);\r\n        // graph.scrollCellToVisible(cell);\r\n      }\r\n    }\r\n  }\r\n}\r\n"],"names":["_defaults","async","breaks","extensions","gfm","hooks","pedantic","renderer","silent","tokenizer","walkTokens","changeDefaults","newDefaults","escapeTest","escapeReplace","RegExp","source","escapeTestNoEncode","escapeReplaceNoEncode","escapeReplacements","getEscapeReplacement","ch","html","encode","test","replace","unescapeTest","caret","edit","regex","opt","obj","name","val","getRegex","cleanUrl","href","encodeURI","e","noopTest","exec","splitCells","tableRow","count","cells","match","offset","str","escaped","curr","split","i","trim","shift","length","pop","splice","push","rtrim","c","invert","l","suffLen","currChar","charAt","slice","outputLink","cap","link","raw","lexer","title","text","state","inLink","token","type","tokens","inlineTokens","_Tokenizer","options","rules","constructor","this","space","src","block","newline","code","codeBlockStyle","fences","matchIndentToCode","indentToCode","map","node","matchIndentInNode","indentInNode","join","indentCodeCompensation","lang","inline","_escapes","heading","trimmed","depth","hr","blockquote","top","blockTokens","list","bull","isordered","ordered","start","loose","items","itemRegex","itemContents","endsWithBlankLine","endEarly","substring","line","t","repeat","nextLine","indent","trimStart","search","blankLine","nextBulletRegex","Math","min","hrRegex","fencesBeginRegex","headingBeginRegex","rawLine","ischecked","istask","task","checked","trimEnd","spacers","filter","hasMultipleLineBreaks","some","pre","def","tag","toLowerCase","table","item","header","align","rows","j","k","row","lheading","paragraph","escape","inRawBlock","trimmedUrl","rtrimSlash","lastParenIndex","b","indexOf","level","findClosingBracket","linkLen","reflink","links","nolink","emStrong","maskedSrc","prevChar","lDelim","punctuation","lLength","rDelim","rLength","delimTotal","midDelimTotal","endReg","rDelimAst","rDelimUnd","lastIndex","index","codespan","hasNonSpaceChars","hasSpaceCharsOnBothEnds","br","del","autolink","url","prevCapZero","_backpedal","inlineText","_paragraph","_label","_title","bullet","listItemStart","_tag","_comment","normal","reflinkSearch","_punctuation","blockSkip","anyPunctuation","_scheme","_email","_attribute","_href","strong","middle","endAst","endUnd","em","_extended_email","_Lexer","inlineQueue","Object","create","lex","lexInline","next","lastToken","cutSrc","lastParagraphClipped","_","leading","tabs","extTokenizer","call","startBlock","startIndex","Infinity","tempSrc","tempStart","forEach","getStartIndex","errMsg","charCodeAt","console","error","Error","keepPrevChar","keys","includes","lastIndexOf","startInline","_Renderer","infostring","quote","body","listitem","checkbox","tablerow","content","tablecell","flags","cleanHref","out","image","_TextRenderer","_Parser","textRenderer","parse","parseInline","renderers","genericToken","ret","parser","headingToken","n","String","fromCharCode","parseInt","codeToken","tableToken","cell","blockquoteToken","listToken","itemBody","unshift","htmlToken","paragraphToken","textToken","escapeToken","tagToken","linkToken","imageToken","strongToken","emToken","codespanToken","delToken","_Hooks","static","Set","preprocess","markdown","postprocess","markedInstance","defaults","setOptions","Parser","Renderer","TextRenderer","Lexer","Tokenizer","Hooks","args","use","callback","values","concat","childTokens","pack","opts","ext","prevRenderer","apply","extLevel","prop","rendererFunc","rendererKey","tokenizerFunc","tokenizerKey","prevTokenizer","hooksFunc","hooksKey","prevHook","passThroughHooks","has","arg","Promise","resolve","then","packWalktokens","origOpt","warn","throwError","prototype","toString","all","catch","message","msg","reject","marked","getDefaults","katexExtension","mathLevel","MathJax","tex2svg","display","outerHTML","ParseMarkdown","markdownStyleTag","isCellPluginMarkdown","style","escapeHtml","unescapeHtml","ExtractMarkdown","div","document","createElement","innerHTML","firstChild","getAttribute","WrapMarkdown","Draw","loadPlugin","ui","mxResources","actions","addAction","graph","editor","getModel","beginUpdate","curCell","getSelectionCell","setStyle","labelChanged","value","endUpdate","AddAction","uiAddPopupMenuItems","menus","addPopupMenuItems","menu","evt","arguments","isSelectionEmpty","addMenuItems","AddPopupMenuItem","addListener","mxEvent","DOUBLE_CLICK","sender","getProperty","DialogMarkdown","consume","HandleEditMarkdown","log","textarea","querySelector","preview","buttons","win_width","win_height","diagramContainer","clientWidth","clientHeight","win","mxWindow","offsetLeft","offsetTop","setResizable","setMaximizable","setClosable","Graph","fileSupport","handleDrop","stopPropagation","preventDefault","dataTransfer","files","file","reader","FileReader","onload","target","result","readAsText","handleDragOver","previewMarkdown","handleInput","addEventListener","cancelBtn","mxUtils","button","get","destroy","className","cancelFirst","appendChild","okBtn","updateContent","show","focus","spinner","spin","stop","setSelectionCell"],"sourceRoot":""}